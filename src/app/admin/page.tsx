// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect, useMemo } from "react";
import Link from 'next/link';
import { Loader2, DollarSign, ShoppingBag, BarChart2, Users, ListOrdered } from "lucide-react";
import dynamic from 'next/dynamic';
import { format, subDays, startOfMonth, endOfMonth, isWithinInterval } from 'date-fns';
import { ptBR } from 'date-fns/locale';

import { type Order, type UserProfile } from "@/types";
import { listenToOrders } from "@/services/order-service";
import { listenToUsers } from "@/services/user-service";
import { formatCurrency } from "@/lib/utils";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";

const Chart = dynamic(() => import('react-apexcharts'), { ssr: false });

const CHART_COLORS = ["#22c55e", "#3b82f6", "#f97316", "#8b5cf6", "#ef4444", "#f59e0b"];

const getStatusVariant = (status: Order['status']) => {
    switch (status) {
        case "Pendente": return "default";
        case "Em Preparo": return "secondary";
        case "Saiu para Entrega": return "outline";
        case "Concluído": return "default";
        case "Cancelado": return "destructive";
        default: return "secondary";
    }
};


function DashboardStats({ orders, users }: { orders: Order[], users: UserProfile[] }) {
    const stats = useMemo(() => {
        const now = new Date();
        const start = startOfMonth(now);
        const end = endOfMonth(now);

        const completedOrders = orders.filter(o => o.status === 'Concluído');
        const completedThisMonth = completedOrders.filter(o => {
            const orderDate = o.createdAt?.toDate ? o.createdAt.toDate() : o.createdAt;
            return orderDate instanceof Date && isWithinInterval(orderDate, { start, end });
        });

        const totalRevenue = completedThisMonth.reduce((acc, order) => acc + order.total, 0);
        const averageTicket = completedThisMonth.length > 0 ? totalRevenue / completedThisMonth.length : 0;
        
        const newUsersThisMonth = users.filter(u => {
            // u.createdAt is already a Date object from the service
            return u.createdAt instanceof Date && isWithinInterval(u.createdAt, { start, end });
        }).length;
        
        return {
            totalRevenue,
            completedOrdersCount: completedThisMonth.length,
            averageTicket,
            newUsersThisMonth,
        }
    }, [orders, users]);

    return (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Receita (Mês)</CardTitle>
                    <DollarSign className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">{formatCurrency(stats.totalRevenue)}</div>
                    <p className="text-xs text-muted-foreground">Total de pedidos concluídos este mês</p>
                </CardContent>
            </Card>
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Ticket Médio (Mês)</CardTitle>
                    <DollarSign className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">{formatCurrency(stats.averageTicket)}</div>
                    <p className="text-xs text-muted-foreground">Valor médio por pedido concluído</p>
                </CardContent>
            </Card>
             <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Pedidos Concluídos (Mês)</CardTitle>
                    <ShoppingBag className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">+{stats.completedOrdersCount}</div>
                    <p className="text-xs text-muted-foreground">Total de pedidos entregues</p>
                </CardContent>
            </Card>
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Novos Clientes (Mês)</CardTitle>
                    <Users className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">+{stats.newUsersThisMonth}</div>
                    <p className="text-xs text-muted-foreground">Novos usuários cadastrados</p>
                </CardContent>
            </Card>
        </div>
    );
}

function RevenueChart({ orders }: { orders: Order[] }) {
    const chartData = useMemo(() => {
        const last7Days = Array.from({ length: 7 }).map((_, i) => {
            const date = subDays(new Date(), i);
            return {
                date: format(date, 'dd/MM'),
                shortDate: format(date, 'd MMM', { locale: ptBR }),
                total: 0
            };
        }).reverse();

        const completedOrders = orders.filter(o => o.status === 'Concluído');

        completedOrders.forEach(order => {
            const orderDate = order.createdAt?.toDate ? order.createdAt.toDate() : order.createdAt;
            if (orderDate instanceof Date) {
              const dayEntry = last7Days.find(d => d.date === format(orderDate, 'dd/MM'));
              if(dayEntry) {
                  dayEntry.total += order.total;
              }
            }
        });

        return {
            series: [{ name: 'Receita', data: last7Days.map(d => d.total.toFixed(2)) }],
            categories: last7Days.map(d => d.shortDate),
        }
    }, [orders]);
    
    const options: ApexCharts.ApexOptions = {
        chart: {
            type: 'bar',
            height: 350,
            toolbar: { show: false }
        },
        plotOptions: {
            bar: {
                borderRadius: 4,
                horizontal: false,
            }
        },
        dataLabels: { enabled: false },
        xaxis: { categories: chartData.categories },
        yaxis: {
            labels: { formatter: (value) => formatCurrency(Number(value)) }
        },
        colors: [CHART_COLORS[0]],
        tooltip: {
            y: { formatter: (val) => formatCurrency(val) }
        },
        grid: {
             borderColor: '#e5e7eb',
             strokeDashArray: 5,
        },
    };

    return (
        <Card>
            <CardHeader>
                <CardTitle className="font-headline text-xl">Receita nos últimos 7 dias</CardTitle>
                <CardDescription>Acompanhe a performance de vendas diária.</CardDescription>
            </CardHeader>
            <CardContent>
                 <div className="h-80 min-h-[200px] w-full">
                    <Chart options={options} series={chartData.series} type="bar" height="100%" width="100%" />
                </div>
            </CardContent>
        </Card>
    )
}

function RecentOrders({ orders }: { orders: Order[] }) {
    return (
        <Card>
            <CardHeader>
                 <CardTitle className="font-headline text-xl">Pedidos Recentes</CardTitle>
                <CardDescription>Os últimos 5 pedidos realizados no sistema.</CardDescription>
            </CardHeader>
            <CardContent>
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Cliente</TableHead>
                            <TableHead>Status</TableHead>
                            <TableHead className="text-right">Total</TableHead>
                            <TableHead className="text-right">Ver</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {orders.slice(0, 5).map(order => (
                            <TableRow key={order.id}>
                                <TableCell>
                                    <div className="font-medium">{order.customerName}</div>
                                    <div className="text-sm text-muted-foreground">{order.customerEmail}</div>
                                </TableCell>
                                <TableCell>
                                    <Badge variant={getStatusVariant(order.status) as any}>{order.status}</Badge>
                                </TableCell>
                                <TableCell className="text-right">{formatCurrency(order.total)}</TableCell>
                                <TableCell className="text-right">
                                    <Button asChild variant="outline" size="sm">
                                        <Link href={`/admin/orders`}>Detalhes</Link>
                                    </Button>
                                </TableCell>
                            </TableRow>
                        ))}
                    </TableBody>
                </Table>
            </CardContent>
        </Card>
    )
}


export default function AdminDashboardPage() {
    const [orders, setOrders] = useState<Order[]>([]);
    const [users, setUsers] = useState<UserProfile[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        const unsubOrders = listenToOrders((dbOrders) => {
            setOrders(dbOrders);
            // We can turn off loading once the first set of data comes in
            if (users.length > 0) setIsLoading(false);
        });
        
        const unsubUsers = listenToUsers((dbUsers) => {
            setUsers(dbUsers);
            if (orders.length > 0 || dbUsers.length > 0 || !isLoading) setIsLoading(false);
        });

        return () => {
            unsubOrders();
            unsubUsers();
        };
    }, []);

    if (isLoading) {
        return (
            <div className="flex justify-center items-center min-h-[calc(100vh-12rem)]">
                <Loader2 className="h-16 w-16 animate-spin text-primary" />
            </div>
        );
    }
    
    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <div className="flex items-center gap-3">
                        <BarChart2 className="h-6 w-6" />
                        <CardTitle className="font-headline text-xl">Dashboard de Vendas</CardTitle>
                    </div>
                    <CardDescription>Métricas e insights sobre a performance da sua loja.</CardDescription>
                </CardHeader>
            </Card>

            <DashboardStats orders={orders} users={users} />
            
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-6">
                 <div className="lg:col-span-3">
                     <RevenueChart orders={orders} />
                 </div>
                 <div className="lg:col-span-2">
                     <RecentOrders orders={orders} />
                 </div>
            </div>
        </div>
    );
}
