// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from 'react';
import { Plus, Trash2, Loader2, Tag, Ruler, Image as ImageIcon, Building, Palette, Info, Type } from 'lucide-react';
import { Button } from '../../../components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../../../components/ui/card';
import { Input } from '../../../components/ui/input';
import { useToast } from '../../../hooks/use-toast';
import {
  addSettingItem,
  deleteSettingItem,
  SettingType,
  updateAllSettings,
  type BannerSettings,
  type ThemeColors,
  type CompanyInfo,
  type FontSettings
} from '../../../services/settings-service';
import { useForm, FormProvider, useFormContext, Controller } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '../../../components/ui/form';
import { Textarea } from '../../../components/ui/textarea';
import Image from 'next/image';
import { Upload, X } from 'lucide-react';
import { uploadBannerImage, uploadLogo } from '../../../services/storage-service';
import { useAppSettings } from '../../../hooks/use-app-settings';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../../../components/ui/select';
import { cn } from '../../../lib/utils';


function SettingsSection({
  title,
  description,
  items,
  type,
  isLoading,
}: {
  title: string;
  description: string;
  items: string[];
  type: SettingType;
  isLoading: boolean;
}) {
  const [newItem, setNewItem] = useState('');
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  const handleAddItem = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!newItem.trim()) return;

    setIsSubmitting(true);
    const success = await addSettingItem(type, newItem.trim());
    if (success) {
      toast({ title: `${title.slice(0, -1)} adicionada!`, description: `"${newItem}" agora está na lista.` });
      setNewItem('');
    } else {
      toast({ title: 'Erro', description: `Não foi possível adicionar a ${title.toLowerCase().slice(0, -1)}.`, variant: 'destructive' });
    }
    setIsSubmitting(false);
  };

  const handleDeleteItem = async (item: string) => {
    const success = await deleteSettingItem(type, item);
     if (success) {
      toast({ title: `${title.slice(0,-1)} removida!`, description: `"${item}" foi removido.`, variant: 'destructive' });
    } else {
      toast({ title: 'Erro', description: `Não foi possível remover a ${title.toLowerCase().slice(0, -1)}.`, variant: 'destructive' });
    }
  };
  
  const Icon = title === "Categorias" ? Tag : Ruler;

  return (
    <Card>
      <CardHeader>
        <div className="flex items-center gap-3">
            <Icon className="h-6 w-6" />
            <CardTitle className="font-headline text-xl">{title}</CardTitle>
        </div>
        <CardDescription>{description}</CardDescription>
      </CardHeader>
      <CardContent>
        <form onSubmit={handleAddItem} className="flex gap-2 mb-4">
          <Input
            value={newItem}
            onChange={(e) => setNewItem(e.target.value)}
            placeholder={`Nova ${title.toLowerCase().slice(0, -1)}`}
            disabled={isSubmitting}
          />
          <Button type="submit" variant="accent" disabled={isSubmitting || !newItem.trim()}>
            {isSubmitting ? <Loader2 className="animate-spin" /> : <Plus />}
            Adicionar
          </Button>
        </form>
        <div className="space-y-2">
          {isLoading ? (
            <div className="flex justify-center p-4">
              <Loader2 className="animate-spin text-primary" />
            </div>
          ) : (
            items.map((item) => (
              <div
                key={item}
                className="flex items-center justify-between rounded-md border p-3"
              >
                <span>{item}</span>
                <Button variant="ghost" size="icon" className="h-8 w-8 text-muted-foreground hover:text-destructive" onClick={() => handleDeleteItem(item)}>
                  <Trash2 className="h-4 w-4" />
                </Button>
              </div>
            ))
          )}
           {!isLoading && items.length === 0 && <p className="text-center text-sm text-muted-foreground pt-4">Nenhum item cadastrado.</p>}
        </div>
      </CardContent>
    </Card>
  );
}

const bannerFormSchema = z.object({
    headline: z.string().min(5, "O título deve ter pelo menos 5 caracteres."),
    description: z.string().min(10, "A descrição deve ter pelo menos 10 caracteres."),
    imageFile: z.instanceof(File).optional(),
    imageUrl: z.string().optional(),
});


function BannerSettingsSection() {
    const { settings, isLoading } = useAppSettings();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [imagePreview, setImagePreview] = useState<string | null>(null);
    
    const form = useFormContext(); // Use context
    
    const imageFile = form.watch("banner.imageFile");
    const imageUrl = form.watch("banner.imageUrl");

    useEffect(() => {
        if (imageFile) {
            const reader = new FileReader();
            reader.onloadend = () => setImagePreview(reader.result as string);
            reader.readAsDataURL(imageFile);
        } else {
            setImagePreview(imageUrl || null);
        }
    }, [imageFile, imageUrl]);

    const removeImage = () => {
      form.setValue("banner.imageFile", undefined);
      form.setValue("banner.imageUrl", "");
      setImagePreview(null);
    }
    
    const onSubmit = async () => {
        const values = form.getValues("banner");
        setIsSubmitting(true);
        try {
            let newImageUrl = values.imageUrl || settings?.banner?.imageUrl || "";
            if(values.imageFile) {
                const uploadedUrl = await uploadBannerImage(values.imageFile);
                if(uploadedUrl) {
                    newImageUrl = uploadedUrl;
                } else {
                    throw new Error("Falha no upload da imagem do banner.")
                }
            }

            if(!newImageUrl) {
                toast({title: "Erro", description: "A imagem do banner é obrigatória.", variant: "destructive"});
                setIsSubmitting(false);
                return;
            }

            const bannerData: BannerSettings = {
                headline: values.headline,
                description: values.description,
                imageUrl: newImageUrl,
            }

            await updateAllSettings({ banner: bannerData });
            toast({ title: "Banner Atualizado!", description: "As informações do banner foram salvas."});

        } catch (error) {
            console.error("Erro ao atualizar banner:", error);
            toast({ title: "Erro", description: "Não foi possível salvar as informações do banner.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    }


    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <ImageIcon className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Gerenciar Banner</CardTitle>
                </div>
                <CardDescription>Atualize a imagem, o título e a descrição do banner principal do cardápio.</CardDescription>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : (
                    <form onSubmit={(e) => { e.preventDefault(); onSubmit()}} className="space-y-6">
                        <FormField
                            control={form.control}
                            name="banner.imageFile"
                            render={({ field: { onChange, ...rest } }) => (
                                <FormItem>
                                    <FormLabel>Imagem do Banner</FormLabel>
                                    <FormControl>
                                    <div className="w-full">
                                        <label htmlFor="banner-image-upload" className="group cursor-pointer flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg hover:bg-muted/50 transition-colors">
                                            {imagePreview ? (
                                                <div className="relative w-full h-full">
                                                    <Image src={imagePreview} alt="Prévia do banner" layout="fill" objectFit="cover" className="rounded-lg" />
                                                    <Button type="button" size="icon" variant="destructive" className="absolute top-2 right-2 h-7 w-7 z-10" onClick={(e) => { e.preventDefault(); removeImage(); }}>
                                                        <X className="h-4 w-4" />
                                                    </Button>
                                                </div>
                                            ) : (
                                                <div className="flex flex-col items-center justify-center pt-5 pb-6">
                                                    <Upload className="w-8 h-8 mb-4 text-muted-foreground group-hover:text-primary" />
                                                    <p className="mb-2 text-sm text-muted-foreground"><span className="font-semibold">Clique para enviar</span> ou arraste e solte</p>
                                                    <p className="text-xs text-muted-foreground">PNG, JPG or GIF (Recomendado: 1200x400px)</p>
                                                </div>
                                            )}
                                            <Input
                                                id="banner-image-upload"
                                                type="file"
                                                className="hidden"
                                                accept="image/png, image/jpeg, image/gif"
                                                onChange={(e) => onChange(e.target.files ? e.target.files[0] : null)}
                                                {...rest}
                                            />
                                        </label>
                                    </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="banner.headline"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Título do Banner</FormLabel>
                                    <FormControl>
                                        <Input placeholder="Ex: Ofertas Especiais" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <FormField
                            control={form.control}
                            name="banner.description"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Descrição do Banner</FormLabel>
                                    <FormControl>
                                        <Textarea placeholder="Ex: Aproveite nossos combos e promoções!" {...field} />
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <div className="flex justify-end">
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Alterações
                            </Button>
                        </div>
                    </form>
                )}
            </CardContent>
        </Card>
    )
}

function LogoSettingsSection() {
    const { settings, isLoading } = useAppSettings();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [imagePreview, setImagePreview] = useState<string | null>(null);

    const form = useFormContext();

    const logoFile = form.watch("logoFile");
    const logoUrl = form.watch("logoUrl");

    useEffect(() => {
        if (logoFile) {
            const reader = new FileReader();
            reader.onloadend = () => setImagePreview(reader.result as string);
            reader.readAsDataURL(logoFile);
        } else {
            setImagePreview(logoUrl || null);
        }
    }, [logoFile, logoUrl]);

    const removeImage = () => {
        form.setValue("logoFile", undefined);
        form.setValue("logoUrl", "");
        setImagePreview(null);
    };

    const onSubmit = async () => {
        const values = form.getValues();
        setIsSubmitting(true);
        try {
            let newLogoUrl = values.logoUrl || settings?.logoUrl || "";
            if (values.logoFile) {
                const uploadedUrl = await uploadLogo(values.logoFile);
                if (uploadedUrl) {
                    newLogoUrl = uploadedUrl;
                } else {
                    throw new Error("Falha no upload do logo.");
                }
            }

            await updateAllSettings({ logoUrl: newLogoUrl });
            toast({ title: "Logo Atualizado!", description: "O logo da empresa foi salvo." });

        } catch (error) {
            console.error("Erro ao atualizar logo:", error);
            toast({ title: "Erro", description: "Não foi possível salvar o logo.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <Building className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Logo da Empresa</CardTitle>
                </div>
                <CardDescription>Faça o upload do logo que será exibido em todo o site.</CardDescription>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : (
                    <form onSubmit={(e) => { e.preventDefault(); onSubmit()}} className="space-y-6">
                        <FormField
                            control={form.control}
                            name="logoFile"
                            render={({ field: { onChange, ...rest } }) => (
                                <FormItem>
                                    <FormLabel>Arquivo do Logo</FormLabel>
                                    <FormControl>
                                        <div className="w-full">
                                            <label htmlFor="logo-image-upload" className="group cursor-pointer flex flex-col items-center justify-center w-full h-48 border-2 border-dashed rounded-lg hover:bg-muted/50 transition-colors">
                                                {imagePreview ? (
                                                    <div className="relative w-full h-full">
                                                        <Image src={imagePreview} alt="Prévia do logo" layout="fill" objectFit="contain" className="rounded-lg p-4" />
                                                        <Button type="button" size="icon" variant="destructive" className="absolute top-2 right-2 h-7 w-7 z-10" onClick={(e) => { e.preventDefault(); removeImage(); }}>
                                                            <X className="h-4 w-4" />
                                                        </Button>
                                                    </div>
                                                ) : (
                                                    <div className="flex flex-col items-center justify-center pt-5 pb-6">
                                                        <Upload className="w-8 h-8 mb-4 text-muted-foreground group-hover:text-primary" />
                                                        <p className="mb-2 text-sm text-muted-foreground"><span className="font-semibold">Clique para enviar</span> ou arraste e solte</p>
                                                        <p className="text-xs text-muted-foreground">PNG, JPG, SVG (Recomendado: 1:1, ex: 200x200px)</p>
                                                    </div>
                                                )}
                                                <Input
                                                    id="logo-image-upload"
                                                    type="file"
                                                    className="hidden"
                                                    accept="image/png, image/jpeg, image/svg+xml"
                                                    onChange={(e) => onChange(e.target.files ? e.target.files[0] : null)}
                                                    {...rest}
                                                />
                                            </label>
                                        </div>
                                    </FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <div className="flex justify-end">
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Logo
                            </Button>
                        </div>
                    </form>
                )}
            </CardContent>
        </Card>
    );
}

function hexToHsl(hex: string): string {
    // Remove hash if it exists
    hex = hex.replace(/^#/, '');

    // Convert 3-digit hex to 6-digit hex
    if (hex.length === 3) {
        hex = hex.split('').map(char => char + char).join('');
    }

    const r = parseInt(hex.substring(0, 2), 16) / 255;
    const g = parseInt(hex.substring(2, 4), 16) / 255;
    const b = parseInt(hex.substring(4, 6), 16) / 255;

    const max = Math.max(r, g, b);
    const min = Math.min(r, g, b);
    let h = 0, s = 0, l = (max + min) / 2;

    if (max !== min) {
        const d = max - min;
        s = l > 0.5 ? d / (2 - max - min) : d / (max + min);
        switch (max) {
            case r: h = (g - b) / d + (g < b ? 6 : 0); break;
            case g: h = (b - r) / d + 2; break;
            case b: h = (r - g) / d + 4; break;
        }
        h /= 6;
    }

    const hValue = (h * 360).toFixed(1);
    const sValue = (s * 100).toFixed(1);
    const lValue = (l * 100).toFixed(1);
    
    return `${hValue} ${sValue}% ${lValue}%`;
}


function ColorPickerInput({ name, label }: { name: "theme.background" | "theme.primary" | "theme.accent", label: string }) {
    const { control, getValues, setValue } = useFormContext();

    // Helper to convert HSL string to HEX for color input
    const hslToHex = (hsl: string) => {
        if (!hsl || typeof hsl !== 'string') return '#ffffff';
        const [h, s, l] = hsl.match(/(\d+(\.\d+)?)/g)?.map(Number) || [0, 0, 100];
        const s_norm = s / 100;
        const l_norm = l / 100;
        const a = s_norm * Math.min(l_norm, 1 - l_norm);
        const f = (n: number) => {
            const k = (n + h / 30) % 12;
            const color = l_norm - a * Math.max(Math.min(k - 3, 9 - k, 1), -1);
            return Math.round(255 * color).toString(16).padStart(2, '0');
        };
        return `#${f(0)}${f(8)}${f(4)}`;
    };

    const initialHsl = getValues(name) || "0 0% 100%";
    const [colorHex, setColorHex] = useState(() => hslToHex(initialHsl));

    useEffect(() => {
        const currentHsl = getValues(name);
        setColorHex(hslToHex(currentHsl));
    }, [getValues, name]);

    return (
        <FormField
            control={control}
            name={name}
            render={({ field }) => (
                <FormItem>
                    <FormLabel>{label}</FormLabel>
                    <FormControl>
                        <div className="flex items-center gap-2">
                             <Input 
                                type="text"
                                placeholder="0 0% 100%" 
                                value={field.value}
                                onChange={(e) => {
                                    field.onChange(e.target.value);
                                    setColorHex(hslToHex(e.target.value));
                                }}
                                className="font-mono"
                             />
                             <div className="relative h-10 w-10">
                                <input
                                    type="color"
                                    value={colorHex}
                                    onChange={(e) => {
                                        const newHex = e.target.value;
                                        setColorHex(newHex);
                                        const newHsl = hexToHsl(newHex);
                                        setValue(name, newHsl, { shouldValidate: true, shouldDirty: true });
                                    }}
                                    className="absolute inset-0 h-full w-full cursor-pointer opacity-0"
                                />
                                 <div 
                                    className="h-10 w-10 rounded-md border" 
                                    style={{ backgroundColor: colorHex }}
                                 />
                             </div>
                        </div>
                    </FormControl>
                    <FormMessage />
                </FormItem>
            )}
        />
    )
}

function ThemeSettingsSection() {
    const { isLoading } = useAppSettings();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);

    const form = useFormContext();

    const onSubmit = async () => {
        const values = form.getValues("theme");
        setIsSubmitting(true);
        try {
            await updateAllSettings({ theme: values });
            toast({ title: "Tema Atualizado!", description: "As cores do site foram alteradas. A mudança pode levar alguns segundos para ser aplicada." });
        } catch (error) {
            console.error("Erro ao atualizar tema:", error);
            toast({ title: "Erro", description: "Não foi possível salvar o novo tema.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <Palette className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Cores do Tema</CardTitle>
                </div>
                <CardDescription>Personalize as cores principais do seu aplicativo. Escolha uma cor ou insira um valor HSL (ex: 210 40% 98%).</CardDescription>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : (
                    <form onSubmit={(e) => { e.preventDefault(); onSubmit()}} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                            <ColorPickerInput name="theme.background" label="Cor de Fundo" />
                            <ColorPickerInput name="theme.primary" label="Cor Primária (Botões)" />
                            <ColorPickerInput name="theme.accent" label="Cor de Destaque" />
                        </div>
                        <div className="flex justify-end">
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Tema
                            </Button>
                        </div>
                    </form>
                )}
            </CardContent>
        </Card>
    );
}

function FontSettingsSection() {
    const { isLoading } = useAppSettings();
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);

    const form = useFormContext();

    const onSubmit = async () => {
        const values = form.getValues("fonts");
        setIsSubmitting(true);
        try {
            await updateAllSettings({ fonts: values });
            toast({ title: "Fontes Atualizadas!", description: "As fontes do site foram alteradas." });
        } catch (error) {
            console.error("Erro ao atualizar fontes:", error);
            toast({ title: "Erro", description: "Não foi possível salvar as novas configurações de fonte.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <Type className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Tipografia</CardTitle>
                </div>
                <CardDescription>Personalize as fontes do seu aplicativo.</CardDescription>
            </CardHeader>
            <CardContent>
                 {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : (
                    <form onSubmit={(e) => { e.preventDefault(); onSubmit()}} className="space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <FormField
                                control={form.control}
                                name="fonts.fontHeadline"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Fonte dos Títulos</FormLabel>
                                         <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                                <SelectTrigger><SelectValue placeholder="Selecione" /></SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                <SelectItem value="Space Grotesk">Space Grotesk (Moderna)</SelectItem>
                                                <SelectItem value="Inter">Inter (Sóbria)</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="fonts.fontBody"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Fonte do Corpo do Texto</FormLabel>
                                         <Select onValueChange={field.onChange} defaultValue={field.value}>
                                            <FormControl>
                                                <SelectTrigger><SelectValue placeholder="Selecione" /></SelectTrigger>
                                            </FormControl>
                                            <SelectContent>
                                                <SelectItem value="Space Grotesk">Space Grotesk</SelectItem>
                                                <SelectItem value="Inter">Inter</SelectItem>
                                            </SelectContent>
                                        </Select>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>
                        <div className="flex justify-end">
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Fontes
                            </Button>
                        </div>
                    </form>
                 )}
            </CardContent>
        </Card>
    );
}

function CompanyInfoSection() {
    const { toast } = useToast();
    const [isSubmitting, setIsSubmitting] = useState(false);
    const form = useFormContext();
    const {isLoading} = useAppSettings()

    const onSubmit = async () => {
        const values = form.getValues("companyInfo");
        setIsSubmitting(true);
        try {
            await updateAllSettings({ companyInfo: values });
            toast({ title: "Informações Atualizadas!", description: "Os dados da empresa foram salvos." });
        } catch (error) {
            console.error("Erro ao atualizar informações da empresa:", error);
            toast({ title: "Erro", description: "Não foi possível salvar os dados.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    };

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <Info className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Informações da Empresa</CardTitle>
                </div>
                <CardDescription>Edite os dados que aparecerão no rodapé do site.</CardDescription>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : (
                    <form onSubmit={(e) => { e.preventDefault(); onSubmit()}} className="space-y-6">
                        <FormField
                            control={form.control}
                            name="companyInfo.name"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Nome da Empresa</FormLabel>
                                    <FormControl><Input placeholder="Pizzaria do Zé" {...field} /></FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                         <FormField
                            control={form.control}
                            name="companyInfo.address"
                            render={({ field }) => (
                                <FormItem>
                                    <FormLabel>Endereço</FormLabel>
                                    <FormControl><Input placeholder="Rua das Flores, 123, São Paulo - SP" {...field} /></FormControl>
                                    <FormMessage />
                                </FormItem>
                            )}
                        />
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                            <FormField
                                control={form.control}
                                name="companyInfo.phone"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Telefone</FormLabel>
                                        <FormControl><Input placeholder="(11) 99999-9999" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                            <FormField
                                control={form.control}
                                name="companyInfo.email"
                                render={({ field }) => (
                                    <FormItem>
                                        <FormLabel>Email</FormLabel>
                                        <FormControl><Input placeholder="contato@pizzaria.com" {...field} /></FormControl>
                                        <FormMessage />
                                    </FormItem>
                                )}
                            />
                        </div>
                        <div className="flex justify-end">
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Informações
                            </Button>
                        </div>
                    </form>
                )}
            </CardContent>
        </Card>
    );
}

const hslRegex = /^(\d{1,3}(\.\d+)?\s\d{1,3}(\.\d+)?%\s\d{1,3}(\.\d+)?%)$/;
const invalidHslFormatMessage = "Formato HSL inválido. Ex: 220 9% 46%";

const settingsFormSchema = z.object({
    logoFile: z.instanceof(File).optional(),
    logoUrl: z.string().optional(),
    banner: z.object({
        headline: z.string().min(5, "O título deve ter pelo menos 5 caracteres.").optional(),
        description: z.string().min(10, "A descrição deve ter pelo menos 10 caracteres.").optional(),
        imageFile: z.instanceof(File).optional(),
        imageUrl: z.string().optional(),
    }).optional(),
    theme: z.object({
        background: z.string().regex(hslRegex, invalidHslFormatMessage).optional(),
        primary: z.string().regex(hslRegex, invalidHslFormatMessage).optional(),
        accent: z.string().regex(hslRegex, invalidHslFormatMessage).optional(),
    }).optional(),
    fonts: z.object({
        fontBody: z.enum(['Inter', 'Space Grotesk']).optional(),
        fontHeadline: z.enum(['Inter', 'Space Grotesk']).optional(),
    }).optional(),
    companyInfo: z.object({
        name: z.string().optional(),
        address: z.string().optional(),
        phone: z.string().optional(),
        email: z.string().email("Email inválido.").optional(),
    }).optional(),
});


export default function SettingsPage() {
    const { settings, isLoading } = useAppSettings();

     const methods = useForm({
        resolver: zodResolver(settingsFormSchema),
        defaultValues: {
            logoUrl: "",
            banner: { headline: "", description: "", imageUrl: ""},
            theme: { 
                background: "0 0% 100%",
                primary: "262.1 83.3% 57.8%",
                accent: "47.9 95.8% 53.1%",
             },
            fonts: { fontBody: 'Inter', fontHeadline: 'Space Grotesk' },
            companyInfo: { name: "", address: "", phone: "", email: "" },
        }
    });

    useEffect(() => {
        if (settings) {
            methods.reset({
                logoUrl: settings.logoUrl || "",
                banner: settings.banner || { headline: "", description: "", imageUrl: "" },
                theme: settings.theme || { background: "0 0% 100%", primary: "262.1 83.3% 57.8%", accent: "47.9 95.8% 53.1%" },
                fonts: settings.fonts || { fontBody: 'Inter', fontHeadline: 'Space Grotesk' },
                companyInfo: settings.companyInfo || { name: "", address: "", phone: "", email: "" },
            });
        }
    }, [settings, methods]);

    return (
        <FormProvider {...methods}>
            <div className="space-y-8">
                <div className="grid grid-cols-1 lg:grid-cols-2 gap-8">
                    <ThemeSettingsSection />
                    <FontSettingsSection />
                </div>
                <div className="md:col-span-2">
                    <CompanyInfoSection />
                </div>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <BannerSettingsSection />
                    <LogoSettingsSection />
                </div>

                <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
                    <SettingsSection
                        title="Categorias"
                        description="Gerencie as categorias de produtos do seu cardápio."
                        items={settings?.categories || []}
                        type="categories"
                        isLoading={isLoading}
                    />
                    <SettingsSection
                        title="Unidades"
                        description="Gerencie as unidades de medida para os tamanhos dos produtos."
                        items={settings?.units || []}
                        type="units"
                        isLoading={isLoading}
                    />
                </div>
            </div>
        </FormProvider>
    );
}
