// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect, useMemo } from "react";
import { Loader2, Truck, Clock, User, BarChart2, Star } from "lucide-react";
import dynamic from 'next/dynamic';


import { type Order } from "../../../types";
import { listenToOrders } from "../../../services/order-service";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "../../../components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "../../../components/ui/table";
import { Avatar, AvatarFallback, AvatarImage } from "../../../components/ui/avatar";
import { listenToUsers } from "../../../services/user-service";
import { type UserProfile } from "../../../types";
import { subDays, format } from 'date-fns';
import { ptBR } from 'date-fns/locale';

const Chart = dynamic(() => import('react-apexcharts'), { ssr: false });

const CHART_COLORS = ["#22c55e", "#3b82f6", "#f97316", "#8b5cf6", "#ef4444", "#f59e0b"];

function formatDuration(minutes: number) {
    if (isNaN(minutes) || minutes < 0) return "N/A";
    const h = Math.floor(minutes / 60);
    const m = Math.round(minutes % 60);
    return `${h > 0 ? `${h}h ` : ''}${m}min`;
}

function DeliveryStats({ orders }: { orders: Order[] }) {
    const stats = useMemo(() => {
        const completedOrders = orders.filter(o => o.status === 'Concluído' && o.completedAt);
        if (completedOrders.length === 0) {
            return { completedCount: 0, avgTime: 0, totalValue: 0, highestRatedDeliverer: null };
        }
        
        const totalDeliveryTime = completedOrders.reduce((acc, order) => {
            const created = order.createdAt.toMillis();
            const completed = order.completedAt!.toMillis();
            return acc + (completed - created);
        }, 0);

        const totalValue = completedOrders.reduce((acc, order) => acc + order.total, 0);

        const avgTimeInMinutes = (totalDeliveryTime / completedOrders.length) / (1000 * 60);


        return {
            completedCount: completedOrders.length,
            avgTime: avgTimeInMinutes,
            totalValue
        }
    }, [orders]);

    return (
        <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-3">
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Entregas Concluídas</CardTitle>
                    <Truck className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">{stats.completedCount}</div>
                    <p className="text-xs text-muted-foreground">Total de pedidos entregues</p>
                </CardContent>
            </Card>
            <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Tempo Médio de Entrega</CardTitle>
                    <Clock className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">{formatDuration(stats.avgTime)}</div>
                    <p className="text-xs text-muted-foreground">Do pedido à conclusão</p>
                </CardContent>
            </Card>
             <Card>
                <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
                    <CardTitle className="text-sm font-medium">Valor Total Entregue</CardTitle>
                    <Star className="h-4 w-4 text-muted-foreground" />
                </CardHeader>
                <CardContent>
                    <div className="text-2xl font-bold">R$ {stats.totalValue.toFixed(2)}</div>
                    <p className="text-xs text-muted-foreground">Soma de todos os pedidos concluídos</p>
                </CardContent>
            </Card>
        </div>
    );
}

function DelivererRanking({ orders, users }: { orders: Order[], users: UserProfile[]}) {
    const ranking = useMemo(() => {
        const completedOrders = orders.filter(o => o.status === 'Concluído');
        const deliveryCounts = completedOrders.reduce((acc, order) => {
            // This is a simplification. In a real app, you'd assign a deliverer to an order.
            // Here, we'll simulate by assigning a random delivery person.
            const deliveryUsers = users.filter(u => u.role === 'delivery');
            if(deliveryUsers.length > 0) {
                 const deliverer = deliveryUsers[Math.floor(Math.random() * deliveryUsers.length)];
                 acc[deliverer.uid] = (acc[deliverer.uid] || 0) + 1;
            }
            return acc;
        }, {} as Record<string, number>);

        return Object.entries(deliveryCounts).map(([uid, count]) => {
            const user = users.find(u => u.uid === uid);
            return {
                uid: uid,
                name: user?.displayName || user?.email || 'Desconhecido',
                photoURL: user?.photoURL,
                count: count,
            }
        }).sort((a,b) => b.count - a.count).slice(0, 5); // Top 5
    }, [orders, users]);

    return (
         <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <User className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Ranking de Entregadores</CardTitle>
                </div>
                <CardDescription>Entregadores com mais pedidos concluídos.</CardDescription>
            </CardHeader>
            <CardContent>
                {ranking.length > 0 ? (
                <Table>
                    <TableHeader>
                        <TableRow>
                            <TableHead>Posição</TableHead>
                            <TableHead>Entregador</TableHead>
                            <TableHead className="text-right">Entregas</TableHead>
                        </TableRow>
                    </TableHeader>
                    <TableBody>
                        {ranking.map((d, index) => (
                        <TableRow key={d.uid}>
                            <TableCell className="font-bold">{index + 1}º</TableCell>
                            <TableCell>
                                <div className="flex items-center gap-3">
                                    <Avatar className="h-8 w-8">
                                        <AvatarImage src={d.photoURL} alt={d.name} />
                                        <AvatarFallback>{d.name.charAt(0)}</AvatarFallback>
                                    </Avatar>
                                    <span>{d.name}</span>
                                </div>
                            </TableCell>
                            <TableCell className="text-right font-medium">{d.count}</TableCell>
                        </TableRow>
                        ))}
                    </TableBody>
                </Table>
                ) : (
                    <div className="text-center py-8 text-muted-foreground">
                        Nenhuma entrega concluída para gerar o ranking.
                    </div>
                )}
            </CardContent>
        </Card>
    );
}

function DeliveryPerformanceChart({ orders }: { orders: Order[] }) {
    const chartData = useMemo(() => {
        const last7Days = Array.from({ length: 7 }).map((_, i) => {
            const date = subDays(new Date(), i);
            return {
                date: format(date, 'dd/MM'),
                shortDate: format(date, 'd MMM', { locale: ptBR }),
                count: 0
            };
        }).reverse();

        const completedOrders = orders.filter(o => o.status === 'Concluído');
        
        completedOrders.forEach(order => {
            const orderDate = order.createdAt.toDate();
            const dayEntry = last7Days.find(d => d.date === format(orderDate, 'dd/MM'));
            if(dayEntry) {
                dayEntry.count += 1;
            }
        });

        return last7Days.map((item) => ({
            x: item.shortDate,
            y: item.count,
        }))
    }, [orders]);
    

    if (orders.filter(o => o.status === 'Concluído').length === 0) {
        return (
             <Card>
                <CardHeader>
                    <div className="flex items-center gap-3">
                        <BarChart2 className="h-6 w-6" />
                        <CardTitle className="font-headline text-xl">Desempenho de Entregas</CardTitle>
                    </div>
                    <CardDescription>Volume de entregas concluídas nos últimos 7 dias.</CardDescription>
                </CardHeader>
                <CardContent>
                    <div className="flex h-80 min-h-[200px] w-full items-center justify-center rounded-md bg-muted/50">
                        <p className="text-muted-foreground">Nenhum dado de entrega para exibir.</p>
                    </div>
                </CardContent>
            </Card>
        )
    }

    const series = [{
        name: 'Entregas',
        data: chartData,
    }];
    
    const options: ApexCharts.ApexOptions = {
        chart: {
            type: 'bar',
            toolbar: { show: false },
        },
        plotOptions: {
            bar: {
                borderRadius: 4,
                horizontal: false,
            }
        },
        dataLabels: {
            enabled: false
        },
        xaxis: {
            categories: chartData.map(d => d.x),
        },
        yaxis: {
             labels: {
                formatter: (value) => String(parseInt(value))
            }
        },
        colors: CHART_COLORS,
        legend: {
            show: false,
        },
        grid: {
             borderColor: '#e5e7eb',
             strokeDashArray: 5,
        },
        tooltip: {
             y: {
                formatter: (val) => `${val} entregas`
             }
        }
    };


    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <BarChart2 className="h-6 w-6" />
                    <CardTitle className="font-headline text-xl">Desempenho de Entregas</CardTitle>
                </div>
                <CardDescription>Volume de entregas concluídas nos últimos 7 dias.</CardDescription>
            </CardHeader>
            <CardContent>
                <div className="h-80 min-h-[200px] w-full">
                     <Chart options={options} series={series} type="bar" height="100%" width="100%" />
                </div>
            </CardContent>
        </Card>
    );
}

export default function DeliveryAnalysisPage() {
    const [orders, setOrders] = useState<Order[]>([]);
    const [users, setUsers] = useState<UserProfile[]>([]);
    const [isLoading, setIsLoading] = useState(true);

    useEffect(() => {
        setIsLoading(true);
        const unsubOrders = listenToOrders(setOrders);
        const unsubUsers = listenToUsers((dbUsers) => {
            setUsers(dbUsers);
            setIsLoading(false);
        });

        return () => {
            unsubOrders();
            unsubUsers();
        };
    }, []);

    if (isLoading) {
        return (
            <div className="flex justify-center items-center min-h-[calc(100vh-12rem)]">
                <Loader2 className="h-16 w-16 animate-spin text-primary" />
            </div>
        );
    }
    
    return (
        <div className="space-y-6">
            <Card>
                <CardHeader>
                    <div className="flex items-center gap-3">
                        <Truck className="h-6 w-6" />
                        <CardTitle className="font-headline text-xl">Análise de Entregas</CardTitle>
                    </div>
                    <CardDescription>Métricas e insights sobre a performance da sua operação de entrega.</CardDescription>
                </CardHeader>
            </Card>

            <DeliveryStats orders={orders} />
            
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
                 <DeliveryPerformanceChart orders={orders} />
                 <DelivererRanking orders={orders} users={users} />
            </div>
        </div>
    );
}
