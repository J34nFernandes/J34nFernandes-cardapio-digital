// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";

import { Loader2, Users, ShieldCheck, Truck, User, PlusCircle, Trash2 } from "lucide-react";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";

import { type UserProfile } from "@/types";
import { listenToUsers, updateUserRole } from "@/services/user-service";
import { createUserFromAdmin, deleteUserAccount } from "@/services/auth-service";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Button } from "@/components/ui/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogDescription, DialogClose } from "@/components/ui/dialog";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "@/components/ui/alert-dialog";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { useToast } from "@/hooks/use-toast";
import { useAuth } from "@/hooks/use-auth";
import { useRouter } from "next/navigation";


const roleConfig: Record<UserProfile['role'], { icon: React.ElementType, label: string, variant: "default" | "secondary" | "destructive" | "outline" | null | undefined }> = {
    admin: { icon: ShieldCheck, label: "Admin", variant: "destructive" },
    delivery: { icon: Truck, label: "Entregador", variant: "secondary" },
    customer: { icon: User, label: "Cliente", variant: "outline" },
}

const userFormSchema = z.object({
  displayName: z.string().min(3, "O nome é obrigatório."),
  email: z.string().email("Formato de e-mail inválido."),
  password: z.string().min(6, "A senha deve ter pelo menos 6 caracteres."),
  role: z.enum(["admin", "delivery", "customer"]),
});

type UserFormValues = z.infer<typeof userFormSchema>;

function AddUserDialog({ onUserAdded }: { onUserAdded: () => void }) {
    const [isOpen, setIsOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const { toast } = useToast();

    const form = useForm<UserFormValues>({
        resolver: zodResolver(userFormSchema),
        defaultValues: {
            displayName: "",
            email: "",
            password: "",
            role: "customer",
        }
    });

    const onSubmit = async (values: UserFormValues) => {
        setIsSubmitting(true);
        const { error } = await createUserFromAdmin({
            displayName: values.displayName,
            email: values.email,
            password: values.password,
            role: values.role as UserProfile['role'],
        });

        if (error) {
            toast({ title: "Erro ao criar usuário", description: error.message, variant: "destructive" });
        } else {
            toast({ title: "Usuário Criado!", description: `A conta para ${values.displayName} foi criada com sucesso.` });
            onUserAdded();
            form.reset();
            setIsOpen(false);
        }
        setIsSubmitting(false);
    }

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>
                <Button>
                    <PlusCircle className="mr-2 h-4 w-4" />
                    Adicionar Novo Usuário
                </Button>
            </DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle className="font-headline text-xl">Criar Novo Usuário</DialogTitle>
                    <DialogDescription>Preencha os dados abaixo para criar uma nova conta no sistema.</DialogDescription>
                </DialogHeader>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField control={form.control} name="displayName" render={({ field }) => (
                            <FormItem><FormLabel>Nome Completo</FormLabel><FormControl><Input placeholder="Nome do usuário" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                         <FormField control={form.control} name="email" render={({ field }) => (
                            <FormItem><FormLabel>Email</FormLabel><FormControl><Input type="email" placeholder="usuario@email.com" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name="password" render={({ field }) => (
                            <FormItem><FormLabel>Senha</FormLabel><FormControl><Input type="password" placeholder="••••••••" {...field} /></FormControl><FormMessage /></FormItem>
                        )} />
                        <FormField control={form.control} name="role" render={({ field }) => (
                            <FormItem><FormLabel>Função</FormLabel>
                                <Select onValueChange={field.onChange} defaultValue={field.value}>
                                    <FormControl><SelectTrigger><SelectValue placeholder="Selecione a função" /></SelectTrigger></FormControl>
                                    <SelectContent>
                                        {Object.entries(roleConfig).map(([role, config]) => (
                                            <SelectItem key={role} value={role}>{config.label}</SelectItem>
                                        ))}
                                    </SelectContent>
                                </Select>
                            <FormMessage /></FormItem>
                        )} />
                         <DialogFooter>
                            <DialogClose asChild><Button variant="ghost">Cancelar</Button></DialogClose>
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Criar Usuário
                            </Button>
                        </DialogFooter>
                    </form>
                </Form>
            </DialogContent>
        </Dialog>
    )
}

export default function UsersPage() {
    const [users, setUsers] = useState<UserProfile[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    const { toast } = useToast();
    const { user, userProfile, loadingAuth } = useAuth();
    const router = useRouter();

     useEffect(() => {
        if (loadingAuth) return;

        if (!user || (userProfile && userProfile.role !== 'admin')) {
            toast({ title: "Acesso Negado", description: "Você não tem permissão para ver esta página.", variant: "destructive"});
            router.push('/login');
            return;
        }

        setIsLoading(true);
        const unsubscribe = listenToUsers((dbUsers) => {
            setUsers(dbUsers);
            setIsLoading(false);
        });

        return () => unsubscribe();
    }, [user, userProfile, loadingAuth, router, toast]);

    const handleRoleChange = async (uid: string, newRole: UserProfile['role']) => {
        const success = await updateUserRole(uid, newRole);
        if(success) {
            toast({ title: "Função Atualizada!", description: `O usuário agora é um ${roleConfig[newRole].label}.`});
        } else {
            toast({ title: "Erro!", description: "Não foi possível atualizar a função do usuário.", variant: "destructive" });
        }
    }

    const handleDeleteUser = async (userToDelete: UserProfile) => {
        const { error } = await deleteUserAccount(userToDelete.uid);
         if (error) {
            toast({ title: "Erro ao excluir", description: error.message, variant: "destructive" });
        } else {
            toast({ title: "Usuário Excluído", description: `${userToDelete.displayName} foi removido do sistema.`, variant: "destructive" });
        }
    }

    if (isLoading || loadingAuth) {
        return (
            <div className="flex justify-center items-center min-h-[calc(100vh-12rem)]">
                <Loader2 className="h-16 w-16 animate-spin text-primary" />
            </div>
        );
    }
    
    return (
        <Card>
            <CardHeader>
                <div className="flex items-center justify-between">
                    <div className="space-y-1">
                        <CardTitle className="font-headline text-xl">Gerenciamento de Usuários</CardTitle>
                        <CardDescription>Veja, altere ou remova usuários do sistema.</CardDescription>
                    </div>
                     <AddUserDialog onUserAdded={() => { /* The listener will auto-update the list */ }}/>
                </div>
            </CardHeader>
            <CardContent>
                <div className="w-full overflow-hidden rounded-md border">
                    <Table>
                        <TableHeader>
                            <TableRow>
                                <TableHead>Usuário</TableHead>
                                <TableHead>Membro Desde</TableHead>
                                <TableHead>Função</TableHead>
                                <TableHead className="w-[180px]">Alterar Função</TableHead>
                                <TableHead className="w-[80px]">Ações</TableHead>
                            </TableRow>
                        </TableHeader>
                        <TableBody>
                            {users.map((userRow) => {
                                const RoleIcon = roleConfig[userRow.role].icon;
                                const isSelf = userRow.uid === userProfile?.uid;
                                const isLastAdmin = isSelf && userRow.role === 'admin' && users.filter(u => u.role === 'admin').length === 1;
                                const creationDate = userRow.createdAt instanceof Date ? format(userRow.createdAt, "dd/MM/yyyy", { locale: ptBR }) : 'Data indisponível';

                                return (
                                <TableRow key={userRow.uid}>
                                    <TableCell className="font-medium flex items-center gap-2">
                                        {userRow.photoURL && <img src={userRow.photoURL} alt={userRow.displayName || userRow.email} className="h-6 w-6 rounded-full" />}
                                        <div className="flex flex-col">
                                            <span>{userRow.displayName}</span>
                                            <span className="text-xs text-muted-foreground">{userRow.email}</span>
                                        </div>
                                        {isSelf && <Badge variant="outline">Você</Badge>}
                                    </TableCell>
                                    <TableCell>
                                        {creationDate}
                                    </TableCell>
                                     <TableCell>
                                        <Badge variant={roleConfig[userRow.role].variant}>
                                            <RoleIcon className="mr-1.5 h-4 w-4" />
                                            {roleConfig[userRow.role].label}
                                        </Badge>
                                    </TableCell>
                                    <TableCell>
                                        <Select 
                                            defaultValue={userRow.role} 
                                            onValueChange={(newRole) => handleRoleChange(userRow.uid, newRole as UserProfile['role'])}
                                            disabled={isLastAdmin}
                                        >
                                            <SelectTrigger>
                                                <SelectValue placeholder="Selecione a função" />
                                            </SelectTrigger>
                                            <SelectContent>
                                                {Object.entries(roleConfig).map(([role, config]) => (
                                                    <SelectItem key={role} value={role}>{config.label}</SelectItem>
                                                ))}
                                            </SelectContent>
                                        </Select>
                                         {isLastAdmin && <p className="text-xs text-muted-foreground mt-1">Não pode alterar a função do único admin.</p>}
                                    </TableCell>
                                     <TableCell>
                                        <AlertDialog>
                                            <AlertDialogTrigger asChild>
                                                <Button variant="ghost" size="icon" className="h-8 w-8 text-muted-foreground hover:text-destructive" disabled={isLastAdmin}>
                                                    <Trash2 className="h-4 w-4" />
                                                </Button>
                                            </AlertDialogTrigger>
                                            <AlertDialogContent>
                                                <AlertDialogHeader>
                                                    <AlertDialogTitle>Excluir {userRow.displayName}?</AlertDialogTitle>
                                                    <AlertDialogDescription>
                                                        Esta ação é permanente e não pode ser desfeita. A conta do usuário e todos os seus dados serão removidos.
                                                    </AlertDialogDescription>
                                                </AlertDialogHeader>
                                                <AlertDialogFooter>
                                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>
                                                    <AlertDialogAction onClick={() => handleDeleteUser(userRow)} className="bg-destructive hover:bg-destructive/90">Excluir Usuário</AlertDialogAction>
                                                </AlertDialogFooter>
                                            </AlertDialogContent>
                                        </AlertDialog>
                                    </TableCell>
                                </TableRow>
                                );
                            })}
                        </TableBody>
                    </Table>
                </div>
            </CardContent>
        </Card>
    )

}
