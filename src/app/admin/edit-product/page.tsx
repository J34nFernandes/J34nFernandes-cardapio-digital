// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import { useRouter, useParams } from "next/navigation";
import Link from "next/link";
import { ChevronLeft, Loader2, Package } from "lucide-react";

import { Button } from "@/components/ui/button";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { ProductForm, type ProductFormValues } from "@/components/product-form";
import { useToast } from "@/hooks/use-toast";
import { getProductById, updateProduct } from "@/services/product-service";
import { uploadProductImage } from "@/services/storage-service";
import { type Product } from "@/types";
import { Skeleton } from "@/components/ui/skeleton";


export default function EditProductPage() {
  const router = useRouter();
  const params = useParams();
  const { id } = params;

  const [product, setProduct] = useState<Product | null>(null);
  const [isLoading, setIsLoading] = useState(true);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();

  useEffect(() => {
    if (typeof id !== "string") {
       setIsLoading(false);
       return;
    };
    const fetchProduct = async () => {
      setIsLoading(true);
      const dbProduct = await getProductById(id);
      if (dbProduct) {
        setProduct(dbProduct);
      } else {
        toast({ title: "Erro", description: "Produto não encontrado.", variant: "destructive" });
        router.push("/admin");
      }
      setIsLoading(false);
    };
    fetchProduct();
  }, [id, router, toast]);

  const handleUpdateProduct = async (values: ProductFormValues) => {
    if (!id || typeof id !== "string") return;

    setIsSubmitting(true);
    try {
      let imageUrl = product?.imageUrl || "";

      // Check if a new image file was uploaded
      if (values.imageFile) {
        const uploadedUrl = await uploadProductImage(values.imageFile);
        if (uploadedUrl) {
          imageUrl = uploadedUrl;
        } else {
          throw new Error("Falha no upload da nova imagem.");
        }
      } else if (values.imageUrl === "") {
        // Handle case where image was removed but not replaced
        imageUrl = "";
      }

      const updatedProductData: Partial<Product> = {
        name: values.name,
        price: values.price,
        category: values.category,
        size: values.size,
        unit: values.unit,
        stock: values.stock,
        imageUrl: imageUrl,
        description: values.description,
      };

      await updateProduct(id, updatedProductData);
      
      toast({
        title: "Produto Atualizado!",
        description: `"${values.name}" foi atualizado com sucesso.`,
      });
      router.push("/admin/products");

    } catch (error) {
      console.error("Erro ao atualizar produto:", error);
      toast({
        title: "Erro!",
        description: "Não foi possível atualizar o produto. Tente novamente.",
        variant: "destructive",
      });
    } finally {
      setIsSubmitting(false);
    }
  };
  
  const renderSkeleton = () => (
    <Card>
      <CardHeader>
        <Skeleton className="h-6 w-1/2" />
        <Skeleton className="h-4 w-3/4" />
      </CardHeader>
      <CardContent className="space-y-6">
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
        </div>
         <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
            <Skeleton className="h-10 w-full" />
        </div>
        <Skeleton className="h-40 w-full" />
        <div className="flex justify-end">
            <Skeleton className="h-10 w-32" />
        </div>
      </CardContent>
    </Card>
  )

  return (
    <>
        {isLoading ? renderSkeleton() : (
        <Card>
        <CardHeader>
            <CardTitle className="font-headline text-xl">
                Editando: {product?.name}
            </CardTitle>
            <CardDescription>
                Altere as informações abaixo e clique em salvar.
            </CardDescription>
        </CardHeader>
        <CardContent>
            <ProductForm
                onSubmit={handleUpdateProduct}
                isSubmitting={isSubmitting}
                product={product}
            />
        </CardContent>
        </Card>
        )}
    </>
  );
}
