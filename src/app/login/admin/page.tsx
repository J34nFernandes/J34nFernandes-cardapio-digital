// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Shield, Loader2 } from "lucide-react";

import { Button } from "@/components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "@/components/ui/form";
import { Input } from "@/components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "@/components/ui/card";
import { useToast } from "@/hooks/use-toast";
import { signIn } from "@/services/auth-service";
import { useAuth } from "@/hooks/use-auth";
import { useAppSettings } from "@/hooks/use-app-settings";


const formSchema = z.object({
  email: z.string().email({ message: "Por favor, insira um e-mail válido." }),
  password: z.string().min(6, { message: "A senha deve ter pelo menos 6 caracteres." }),
});

export default function AdminLoginPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const { user, userProfile, loadingAuth } = useAuth();
  const { settings, isLoading: isLoadingSettings } = useAppSettings();

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
    },
  });

  useEffect(() => {
    if (loadingAuth) {
        return; // Wait for auth to finish loading
    }
    if (user && userProfile) {
      if (userProfile.role === 'admin') {
          router.push('/admin');
      } else if (userProfile.role === 'delivery') {
          router.push('/delivery/dashboard');
      }
      // If 'customer' or other roles, they will not be redirected from here
      // and will stay on the page, which is fine since they can't log in here anyway.
    }
  }, [user, userProfile, loadingAuth, router]);

  const onSubmit = async (values: z.infer<typeof formSchema>>) => {
    setIsLoading(true);
    const { error, user: signedInUser } = await signIn(values.email, values.password);
    
    if (error) {
      setIsLoading(false);
      toast({
        title: "Erro de Login",
        description: "As credenciais estão incorretas ou você não tem permissão para acessar.",
        variant: "destructive",
      });
      return;
    } 
    
    // The useEffect will handle redirection based on the role.
    // We don't need to do anything else here on success.
    // The loading state will be turned off by the redirection or if the user doesn't have a valid role.
  };
  
  // Show loader while auth state is being determined
  if (loadingAuth || isLoadingSettings) {
    return (
        <div className="flex min-h-screen flex-col items-center justify-center bg-muted/40 p-4">
             <Loader2 className="h-16 w-16 animate-spin text-primary" />
        </div>
    )
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-muted/40 p-4">
      <div className="mb-8 flex flex-col items-center gap-3 text-primary text-center">
          {settings?.logoUrl ? (
            <Image src={settings.logoUrl} alt="Logo da empresa" width={48} height={48} className="h-12 w-12 object-contain" />
          ) : (
            <Shield className="h-12 w-12" />
          )}
          <h1 className="font-headline text-3xl md:text-4xl font-bold tracking-tight">
            Acesso Restrito
          </h1>
      </div>
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="font-headline text-2xl">Login</CardTitle>
          <CardDescription>
            Use suas credenciais para entrar.
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>E-mail</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="admin@email.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Senha</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? <Loader2 className="animate-spin" /> : "Entrar"}
              </Button>
            </form>
          </Form>
           <div className="mt-6 text-center text-sm">
            <Link href="/" className="font-semibold text-primary underline-offset-4 hover:underline">
              Voltar ao cardápio
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
