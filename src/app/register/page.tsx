
// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import Image from "next/image";
import { useRouter } from "next/navigation";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { Utensils, Loader2 } from "lucide-react";

import { Button } from "../../components/ui/button";
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from "../../components/ui/form";
import { Input } from "../../components/ui/input";
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "../../components/ui/card";
import { useToast } from "../../hooks/use-toast";
import { signUp } from "../../services/auth-service";
import { useAuth } from "../../hooks/use-auth";
import { useAppSettings } from "../../hooks/use-app-settings";


const formSchema = z.object({
  email: z.string().email({ message: "Por favor, insira um e-mail válido." }),
  password: z.string().min(6, { message: "A senha deve ter pelo menos 6 caracteres." }),
  confirmPassword: z.string()
}).refine(data => data.password === data.confirmPassword, {
    message: "As senhas não coincidem.",
    path: ["confirmPassword"]
});

type RegisterFormValues = z.infer<typeof formSchema>;


export default function RegisterPage() {
  const router = useRouter();
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);
  const { user, loadingAuth } = useAuth();
  const { settings, isLoading: isLoadingSettings } = useAppSettings();

  useEffect(() => {
    // If auth is not loading and a user exists, redirect to home.
    if (!loadingAuth && user) {
      router.push('/');
    }
  }, [user, loadingAuth, router]);

  const form = useForm<RegisterFormValues>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      email: "",
      password: "",
      confirmPassword: ""
    },
  });

  const onSubmit = async (values: RegisterFormValues) => {
    setIsLoading(true);
    const { error } = await signUp(values.email, values.password);
    setIsLoading(false);

    if (error) {
      let message = "Ocorreu um erro ao criar a conta.";
      if (error.code === 'auth/email-already-in-use') {
        message = "Este e-mail já está em uso por outra conta.";
      }
      toast({
        title: "Erro no Cadastro",
        description: message,
        variant: "destructive",
      });
    } else {
      toast({
        title: "Cadastro realizado!",
        description: "Sua conta foi criada com sucesso. Você já pode fazer o login.",
      });
      router.push("/login");
    }
  };
  
  // Show loader while auth state is being determined, or if user exists (and redirect is imminent)
  if (loadingAuth || user || isLoadingSettings) {
    return (
        <div className="flex min-h-screen flex-col items-center justify-center bg-background p-4">
             <Loader2 className="h-16 w-16 animate-spin text-primary" />
        </div>
    )
  }

  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-background p-4">
      <div className="mb-8 flex items-center gap-3 text-primary">
          {settings?.logoUrl ? (
            <Image src={settings.logoUrl} alt="Logo da empresa" width={40} height={40} className="h-10 w-10 object-contain" />
          ) : (
            <Utensils className="h-10 w-10" />
          )}
          <h1 className="font-headline text-4xl font-bold tracking-tight">
            Cardápio Digital
          </h1>
      </div>
      <Card className="w-full max-w-md">
        <CardHeader className="text-center">
          <CardTitle className="font-headline text-2xl">Criar uma conta</CardTitle>
          <CardDescription>
            É rápido e fácil. Vamos começar!
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>E-mail</FormLabel>
                    <FormControl>
                      <Input type="email" placeholder="seu@email.com" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Senha</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <FormField
                control={form.control}
                name="confirmPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Confirmar Senha</FormLabel>
                    <FormControl>
                      <Input type="password" placeholder="••••••••" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              <Button type="submit" className="w-full" disabled={isLoading}>
                {isLoading ? <Loader2 className="animate-spin" /> : "Criar Conta"}
              </Button>
            </form>
          </Form>
          <div className="mt-6 text-center text-sm">
            Já tem uma conta?{" "}
            <Link href="/login" className="font-semibold text-primary underline-offset-4 hover:underline">
              Faça o login
            </Link>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}
