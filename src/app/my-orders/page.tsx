// This is an autogenerated file from Firebase Studio.
"use client";

import { useState, useEffect } from "react";
import Link from "next/link";
import { useRouter } from "next/navigation";
import { useAuth } from "../../hooks/use-auth";
import { useCart } from "../../hooks/use-cart";
import { useToast } from "../../hooks/use-toast";
import { listenToOrdersByUserId, updateOrderStatus } from "../../services/order-service";
import { addProductReview } from "../../services/product-service";
import { listenToCoupons } from "../../services/coupon-service";
import { type Order, OrderStatus, type Coupon, type CartItem, type Address, type UserProfile } from "../../types";
import { formatCurrency } from "../../lib/utils";
import { cn } from "../../lib/utils";
import { format } from "date-fns";
import { ptBR } from "date-fns/locale";

import { Card, CardContent, CardHeader, CardTitle, CardDescription } from "../../components/ui/card";
import { Accordion, AccordionContent, AccordionItem, AccordionTrigger } from "../../components/ui/accordion";
import { Separator } from "../../components/ui/separator";
import { Badge } from "../../components/ui/badge";
import { Button } from "../../components/ui/button";
import { Loader2, Package, PackageCheck, PackageSearch, Truck, CheckCircle, XCircle, ChevronLeft, Repeat, TicketPercent, ClipboardCopy, Star, Edit, Trash2, Home, PlusCircle, User as UserIcon } from "lucide-react";
import React from "react";
import {
  AlertDialog,
  AlertDialogAction,
  AlertDialogCancel,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../../components/ui/alert-dialog";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger, DialogFooter, DialogClose } from "../../components/ui/dialog";
import { Banner } from "../../components/banner";
import { Textarea } from "../../components/ui/textarea";
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "../../components/ui/form";
import { useForm } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import { PatternFormat } from "react-number-format";
import { Input } from "../../components/ui/input";
import { addUserAddress, updateUserAddress, deleteUserAddress, updateUserProfile } from "../../services/user-service";


const statusSteps: OrderStatus[] = ["Pendente", "Em Preparo", "Saiu para Entrega", "Concluído"];

const statusIcons: Record<OrderStatus, React.ElementType> = {
    "Pendente": Package,
    "Em Preparo": PackageSearch,
    "Saiu para Entrega": Truck,
    "Concluído": CheckCircle,
    "Cancelado": XCircle,
}

const getStatusVariant = (status: OrderStatus) => {
    switch (status) {
        case "Pendente":
            return "default";
        case "Em Preparo":
            return "secondary";
        case "Saiu para Entrega":
            return "outline";
        case "Concluído":
            return "default";
        case "Cancelado":
            return "destructive";
        default:
            return "secondary";
    }
};


function OrderStatusTracker({ currentStatus }: { currentStatus: OrderStatus }) {
    if (currentStatus === "Cancelado") {
        return (
             <div className="flex items-center gap-2 p-4 rounded-lg bg-destructive/10 text-destructive">
                <XCircle className="h-6 w-6" />
                <span className="font-semibold">Pedido Cancelado</span>
            </div>
        )
    }

    const currentStepIndex = statusSteps.indexOf(currentStatus);

    return (
        <div className="flex items-center justify-between gap-2 p-2">
            {statusSteps.map((status, index) => {
                const Icon = statusIcons[status];
                const isActive = index <= currentStepIndex;
                return (
                    <React.Fragment key={status}>
                        <div className="flex flex-col items-center gap-2 text-center w-24">
                            <div className={cn("flex h-10 w-10 items-center justify-center rounded-full transition-colors",
                                isActive ? "bg-primary text-primary-foreground" : "bg-muted text-muted-foreground"
                            )}>
                               <Icon className="h-5 w-5" />
                            </div>
                            <span className={cn("text-xs font-medium", isActive ? "text-primary" : "text-muted-foreground")}>{status}</span>
                        </div>
                        {index < statusSteps.length - 1 && (
                            <Separator className={cn("flex-1 transition-colors", isActive ? "bg-primary" : "bg-border")} />
                        )}
                    </React.Fragment>
                )
            })}
        </div>
    )
}

function CouponSection() {
    const { toast } = useToast();
    const [coupons, setCoupons] = useState<Coupon[]>([]);
    const [isLoading, setIsLoading] = useState(true);
    
    useEffect(() => {
        const unsubscribe = listenToCoupons((dbCoupons) => {
            setCoupons(dbCoupons);
            setIsLoading(false);
        });
        return () => unsubscribe();
    }, []);

    const copyToClipboard = (code: string) => {
        navigator.clipboard.writeText(code);
        toast({
            title: "Cupom Copiado!",
            description: `O código ${code} foi copiado para sua área de transferência.`,
        });
    };

    return (
        <Card>
            <CardHeader>
                <div className="flex items-center gap-3">
                    <TicketPercent className="h-6 w-6 text-primary" />
                    <CardTitle className="font-headline text-xl">Cupons Disponíveis</CardTitle>
                </div>
                 <CardDescription>
                    Copie um dos cupons abaixo para usar na sua próxima compra.
                </CardDescription>
            </CardHeader>
            <CardContent>
                {isLoading ? (
                    <div className="flex justify-center p-4">
                        <Loader2 className="animate-spin text-primary" />
                    </div>
                ) : coupons.length > 0 ? (
                    <div className="space-y-3">
                        {coupons.map(coupon => (
                            <div key={coupon.id} className="flex w-full items-center justify-between gap-4 rounded-lg border border-dashed p-3">
                                <div>
                                    <p className="font-mono text-base font-semibold text-primary">{coupon.code}</p>
                                    <p className="text-sm text-muted-foreground">{coupon.description || `Desconto de ${coupon.type === 'percentage' ? `${coupon.value}%` : formatCurrency(coupon.value)}`}</p>
                                </div>
                                <Button type="button" size="icon" onClick={() => copyToClipboard(coupon.code)} className="shrink-0 bg-accent text-accent-foreground hover:bg-accent/90">
                                    <ClipboardCopy className="h-5 w-5" />
                                </Button>
                            </div>
                        ))}
                    </div>
                ) : (
                    <p className="text-center text-sm text-muted-foreground pt-4">Nenhum cupom disponível no momento.</p>
                )}
            </CardContent>
        </Card>
    )
}

function ReviewDialog({ order }: { order: Order }) {
    const [isDialogOpen, setIsDialogOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);
    const [reviews, setReviews] = useState<Record<string, { rating: number; comment: string }>>({});
    const { user } = useAuth();
    const { toast } = useToast();

    useEffect(() => {
        if (order.items) {
            const initialReviews: Record<string, { rating: number; comment: string }> = {};
            order.items.forEach(item => {
                if (item.review) {
                    initialReviews[item.id] = { rating: item.review.rating, comment: item.review.comment };
                } else {
                     initialReviews[item.id] = { rating: 0, comment: "" };
                }
            });
            setReviews(initialReviews);
        }
    }, [order.items, isDialogOpen]);

    const handleRatingChange = (productId: string, rating: number) => {
        setReviews(prev => ({ ...prev, [productId]: { ...prev[productId], rating } }));
    };

    const handleCommentChange = (productId: string, comment: string) => {
        setReviews(prev => ({ ...prev, [productId]: { ...prev[productId], comment } }));
    };
    
    const handleSubmitReviews = async () => {
        if (!user) return;
        setIsSubmitting(true);
        
        try {
             for (const item of order.items) {
                const reviewData = reviews[item.id];
                if (reviewData && reviewData.rating > 0 && !item.review) { // Only submit new reviews
                    await addProductReview(item.id, {
                        orderId: order.id,
                        userId: user.uid,
                        userName: user.displayName || user.email || 'Anônimo',
                        rating: reviewData.rating,
                        comment: reviewData.comment,
                    });
                }
             }
             toast({ title: "Avaliações Enviadas!", description: "Obrigado pelo seu feedback!" });
             setIsDialogOpen(false);
        } catch(error) {
            console.error("Error submitting reviews:", error);
            toast({ title: "Erro", description: "Não foi possível enviar suas avaliações.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    }
    
    // Check if there are any unreviewed items
    const hasUnreviewedItems = order.items.some(item => !item.review);
    const allItemsReviewed = order.items.every(item => !!item.review || (reviews[item.id] && reviews[item.id].rating === 0));


    return (
        <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
            <DialogTrigger asChild>
                <Button variant="outline" disabled={!hasUnreviewedItems}>
                    <Star className="mr-2 h-4 w-4" />
                    {hasUnreviewedItems ? 'Avaliar Pedido' : 'Pedido Avaliado'}
                </Button>
            </DialogTrigger>
            <DialogContent className="sm:max-w-2xl">
                <DialogHeader>
                    <DialogTitle className="font-headline text-xl">Avalie os Produtos</DialogTitle>
                </DialogHeader>
                <div className="space-y-4 py-4">
                    {order.items.map(item => (
                        <div key={item.id} className="space-y-3 rounded-md border p-4">
                           <p className="font-semibold">{item.name}</p>
                           {item.review ? (
                                <div className="text-sm text-muted-foreground">
                                    <div className="flex items-center gap-1">
                                         {[...Array(5)].map((_, i) => (
                                            <Star key={i} className={cn("h-5 w-5", i < item.review!.rating ? 'text-amber-400 fill-amber-400' : 'text-muted-foreground')}/>
                                        ))}
                                    </div>
                                    <p className="mt-2 italic">"{item.review.comment}"</p>
                                    <p className="mt-2 text-xs">(Você já avaliou este item)</p>
                                </div>
                           ) : (
                            <>
                                <div className="flex items-center gap-1">
                                    {[...Array(5)].map((_, i) => (
                                        <Star 
                                            key={i} 
                                            className={cn(
                                                "h-6 w-6 cursor-pointer transition-colors", 
                                                reviews[item.id] && i < reviews[item.id].rating ? 'text-amber-400 fill-amber-400' : 'text-muted-foreground hover:text-amber-300'
                                            )}
                                            onClick={() => handleRatingChange(item.id, i + 1)}
                                        />
                                    ))}
                                </div>
                                <Textarea 
                                    placeholder="Deixe seu comentário (opcional)..."
                                    value={reviews[item.id]?.comment || ''}
                                    onChange={(e) => handleCommentChange(item.id, e.target.value)}
                                />
                            </>
                           )}
                        </div>
                    ))}
                </div>
                <DialogFooter>
                    <DialogClose asChild><Button variant="ghost">Fechar</Button></DialogClose>
                    <Button onClick={handleSubmitReviews} disabled={isSubmitting || allItemsReviewed} variant="accent">
                         {isSubmitting && <Loader2 className="animate-spin mr-2"/>}
                        Enviar Avaliações
                    </Button>
                </DialogFooter>
            </DialogContent>
        </Dialog>
    );
}

const addressFormSchema = z.object({
  nickname: z.string().min(2, "O apelido é obrigatório (Ex: Casa, Trabalho)."),
  cep: z.string().min(9, "O CEP deve ter 8 dígitos."),
  street: z.string().min(3, "A rua é obrigatória."),
  number: z.string().min(1, "O número é obrigatório."),
  complement: z.string().optional(),
  neighborhood: z.string().min(3, "O bairro é obrigatório."),
  city: z.string().min(3, "A cidade é obrigatória."),
  state: z.string().length(2, "O UF deve ter 2 caracteres."),
});

type AddressFormValues = z.infer<typeof addressFormSchema>;

function AddressDialog({ address, onSave, children }: { address?: Address, onSave: () => void; children: React.ReactNode }) {
    const { user } = useAuth();
    const { toast } = useToast();
    const [isOpen, setIsOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const form = useForm<AddressFormValues>({
        resolver: zodResolver(addressFormSchema),
        defaultValues: address || {
            nickname: "",
            cep: "",
            street: "",
            number: "",
            complement: "",
            neighborhood: "",
            city: "",
            state: "",
        },
    });

    useEffect(() => {
        if(address) {
            form.reset(address);
        } else {
            form.reset({
                nickname: "",
                cep: "",
                street: "",
                number: "",
                complement: "",
                neighborhood: "",
                city: "",
                state: "",
            });
        }
    }, [address, form, isOpen]);


    const onSubmit = async (values: AddressFormValues) => {
        if (!user) return;
        setIsSubmitting(true);
        try {
            if (address) { // Editing
                await updateUserAddress(user.uid, { ...values, id: address.id });
                toast({ title: "Endereço Atualizado!", description: `O endereço "${values.nickname}" foi salvo.` });
            } else { // Adding
                await addUserAddress(user.uid, values);
                toast({ title: "Endereço Adicionado!", description: `O endereço "${values.nickname}" foi salvo.` });
            }
            onSave();
            setIsOpen(false);
            form.reset();
        } catch (error) {
            console.error("Error saving address", error);
            toast({ title: "Erro", description: "Não foi possível salvar o endereço.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    }

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>{children}</DialogTrigger>
            <DialogContent>
                <DialogHeader>
                    <DialogTitle className="font-headline text-xl">{address ? 'Editar Endereço' : 'Adicionar Novo Endereço'}</DialogTitle>
                </DialogHeader>
                <Form {...form}>
                    <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                        <FormField control={form.control} name="nickname" render={({ field }) => (
                            <FormItem><FormLabel>Apelido</FormLabel><FormControl><Input placeholder="Ex: Casa" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="cep" render={({ field }) => (
                            <FormItem><FormLabel>CEP</FormLabel><FormControl><PatternFormat format="#####-###" customInput={Input} placeholder="00000-000" {...field}/></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="street" render={({ field }) => (
                            <FormItem><FormLabel>Rua</FormLabel><FormControl><Input placeholder="Ex: Rua das Flores" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                         <div className="grid grid-cols-3 gap-4">
                            <FormField control={form.control} name="number" render={({ field }) => (
                                <FormItem className="col-span-1"><FormLabel>Número</FormLabel><FormControl><Input placeholder="123" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                             <FormField control={form.control} name="complement" render={({ field }) => (
                                <FormItem className="col-span-2"><FormLabel>Complemento</FormLabel><FormControl><Input placeholder="Apto 42" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                        </div>
                        <FormField control={form.control} name="neighborhood" render={({ field }) => (
                            <FormItem><FormLabel>Bairro</FormLabel><FormControl><Input placeholder="Ex: Centro" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                         <div className="grid grid-cols-4 gap-4">
                             <FormField control={form.control} name="city" render={({ field }) => (
                                <FormItem className="col-span-3"><FormLabel>Cidade</FormLabel><FormControl><Input placeholder="São Paulo" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                            <FormField control={form.control} name="state" render={({ field }) => (
                                <FormItem className="col-span-1"><FormLabel>UF</FormLabel><FormControl><Input placeholder="SP" {...field} /></FormControl><FormMessage /></FormItem>
                            )}/>
                        </div>
                        <DialogFooter>
                            <DialogClose asChild><Button variant="ghost">Cancelar</Button></DialogClose>
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Endereço
                            </Button>
                        </DialogFooter>
                    </form>
                </Form>
            </DialogContent>
        </Dialog>
    )
}

const userDataSchema = z.object({
  displayName: z.string().min(2, "O nome é obrigatório."),
  phone: z.string().optional(),
});
type UserDataFormValues = z.infer<typeof userDataSchema>;

function UserDataDialog({ onSave, children }: { onSave: () => void; children: React.ReactNode }) {
    const { user, userProfile } = useAuth();
    const { toast } = useToast();
    const [isOpen, setIsOpen] = useState(false);
    const [isSubmitting, setIsSubmitting] = useState(false);

    const form = useForm<UserDataFormValues>({
        resolver: zodResolver(userDataSchema),
        defaultValues: {
            displayName: userProfile?.displayName || "",
            phone: userProfile?.phone || "",
        },
    });
     useEffect(() => {
        if(userProfile) {
            form.reset({
                displayName: userProfile.displayName || "",
                phone: userProfile.phone || "",
            });
        }
    }, [userProfile, form, isOpen]);

    const onSubmit = async (values: UserDataFormValues) => {
        if (!user) return;
        setIsSubmitting(true);
        try {
            await updateUserProfile(user.uid, values);
            toast({ title: "Dados Atualizados!", description: "Suas informações foram salvas com sucesso." });
            onSave();
            setIsOpen(false);
        } catch (error) {
            console.error("Error updating user data", error);
            toast({ title: "Erro", description: "Não foi possível salvar suas informações.", variant: "destructive" });
        } finally {
            setIsSubmitting(false);
        }
    }

    return (
        <Dialog open={isOpen} onOpenChange={setIsOpen}>
            <DialogTrigger asChild>{children}</DialogTrigger>
            <DialogContent>
                 <DialogHeader>
                    <DialogTitle className="font-headline text-xl">Editar Meus Dados</DialogTitle>
                </DialogHeader>
                <Form {...form}>
                     <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                         <FormField control={form.control} name="displayName" render={({ field }) => (
                            <FormItem><FormLabel>Nome Completo</FormLabel><FormControl><Input placeholder="Seu Nome" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <FormField control={form.control} name="phone" render={({ field }) => (
                            <FormItem><FormLabel>Telefone</FormLabel><FormControl><PatternFormat format="+## (##) #####-####" customInput={Input} placeholder="+55 (11) 99999-9999" {...field} /></FormControl><FormMessage /></FormItem>
                        )}/>
                        <DialogFooter>
                            <DialogClose asChild><Button variant="ghost">Cancelar</Button></DialogClose>
                            <Button type="submit" variant="accent" disabled={isSubmitting}>
                                {isSubmitting && <Loader2 className="animate-spin mr-2" />}
                                Salvar Dados
                            </Button>
                        </DialogFooter>
                     </form>
                </Form>
            </DialogContent>
        </Dialog>
    )
}

function UserDataSection() {
    const { userProfile } = useAuth();
    const { toast } = useToast();

    const handleDelete = async (address: Address) => {
        if (!userProfile) return;
        await deleteUserAddress(userProfile.uid, address);
        toast({ title: "Endereço Removido", variant: "destructive" });
    }

    return (
         <Card>
            <CardHeader>
                <div className="flex items-center justify-between">
                    <div className="flex items-center gap-3">
                        <UserIcon className="h-6 w-6 text-primary" />
                        <CardTitle className="font-headline text-xl">Meus Dados</CardTitle>
                    </div>
                     <UserDataDialog onSave={() => {}}>
                        <Button variant="outline"><Edit className="mr-2 h-4 w-4"/>Editar Dados</Button>
                    </UserDataDialog>
                </div>
                 <CardDescription>
                    Gerencie seus dados pessoais e endereços de entrega.
                </CardDescription>
            </CardHeader>
            <CardContent className="space-y-6">
                {/* Personal Info */}
                <div className="space-y-2 rounded-md border p-4">
                    <p><span className="font-semibold">Nome:</span> {userProfile?.displayName || 'Não informado'}</p>
                    <p><span className="font-semibold">Email:</span> {userProfile?.email}</p>
                    <p><span className="font-semibold">Telefone:</span> {userProfile?.phone || 'Não informado'}</p>
                </div>

                {/* Addresses */}
                <div>
                     <div className="flex items-center justify-between mb-4">
                        <h4 className="font-semibold text-lg flex items-center gap-2"><Home className="h-5 w-5"/> Meus Endereços</h4>
                        <AddressDialog onSave={() => {}}>
                            <Button variant="outline" size="sm"><PlusCircle className="mr-2 h-4 w-4"/>Adicionar</Button>
                        </AddressDialog>
                    </div>
                    <div className="space-y-3">
                        {userProfile?.addresses && userProfile.addresses.length > 0 ? (
                            userProfile.addresses.map(addr => (
                                <div key={addr.id} className="flex w-full items-center justify-between gap-4 rounded-lg border p-4">
                                    <div>
                                        <p className="font-semibold">{addr.nickname}</p>
                                        <p className="text-sm text-muted-foreground">{addr.street}, {addr.number} - {addr.city}/{addr.state}</p>
                                    </div>
                                    <div className="flex items-center">
                                        <AddressDialog address={addr} onSave={() => {}}>
                                            <Button variant="ghost" size="icon"><Edit className="h-4 w-4"/></Button>
                                        </AddressDialog>
                                        <AlertDialog>
                                            <AlertDialogTrigger asChild>
                                                <Button variant="ghost" size="icon" className="text-destructive hover:text-destructive/80"><Trash2 className="h-4 w-4"/></Button>
                                            </AlertDialogTrigger>
                                            <AlertDialogContent>
                                                <AlertDialogHeader>
                                                    <AlertDialogTitle>Excluir Endereço?</AlertDialogTitle>
                                                    <AlertDialogDescription>
                                                        A ação de remover o endereço "{addr.nickname}" não pode ser desfeita.
                                                    </AlertDialogDescription>
                                                </AlertDialogHeader>
                                                <AlertDialogFooter>
                                                    <AlertDialogCancel>Cancelar</AlertDialogCancel>
                                                    <AlertDialogAction onClick={() => handleDelete(addr)} className="bg-destructive hover:bg-destructive/90">Excluir</AlertDialogAction>
                                                </AlertDialogFooter>
                                            </AlertDialogContent>
                                        </AlertDialog>
                                    </div>
                                </div>
                            ))
                        ) : (
                            <p className="text-center text-sm text-muted-foreground pt-4">Nenhum endereço cadastrado.</p>
                        )}
                    </div>
                </div>
            </CardContent>
        </Card>
    )
}

export default function MyOrdersPage() {
  const [orders, setOrders] = useState<Order[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const { user, loadingAuth } = useAuth();
  const { addToCart } = useCart();
  const { toast } = useToast();
  const router = useRouter();

  useEffect(() => {
    if (loadingAuth) {
        setIsLoading(true);
        return;
    };
    if (!user) {
      router.push("/login");
      return;
    }

    const unsubscribe = listenToOrdersByUserId(user.uid, (userOrders) => {
      setOrders(userOrders);
      setIsLoading(false);
    });

    return () => unsubscribe();
  }, [user, loadingAuth, router]);

  const handleRepeatOrder = (order: Order) => {
    order.items.forEach(item => {
        const productData = { ...item };
        // This is a workaround as the item in the order is a CartItem, but addToCart expects a Product.
        // The properties are compatible.
        addToCart(productData, item.quantity);
    });
    toast({
        title: "Pedido repetido!",
        description: "Os itens do pedido foram adicionados ao seu carrinho."
    });
    router.push("/");
  }
  
  const handleCancelOrder = async (orderId: string) => {
    const success = await updateOrderStatus(orderId, "Cancelado");
    if(success) {
        toast({ title: "Pedido Cancelado!", description: "Seu pedido foi cancelado com sucesso.", variant: "destructive" });
    } else {
        toast({ title: "Erro!", description: "Não foi possível cancelar o pedido. Entre em contato.", variant: "destructive" });
    }
  }


  if (isLoading || loadingAuth) {
    return (
        <div className="flex min-h-screen items-center justify-center bg-muted/40">
            <Loader2 className="h-16 w-16 animate-spin text-primary" />
        </div>
    )
  }

  return (
    <div className="flex min-h-screen w-full flex-col bg-muted/40">
       <header className="sticky top-0 z-10 flex h-16 items-center gap-4 border-b bg-background px-4 md:px-6">
        <Link
            href="/"
            className="flex items-center gap-2 text-lg font-semibold text-muted-foreground transition-colors hover:text-foreground"
            >
            <ChevronLeft className="h-5 w-5" />
            <span>Voltar para o Cardápio</span>
        </Link>
      </header>

      <main className="container mx-auto max-w-4xl py-8 px-4 md:px-6">
        <div className="space-y-4 mb-8">
            <h1 className="font-headline text-3xl font-bold tracking-tight">Painel do Cliente</h1>
            <p className="text-muted-foreground">Acompanhe seus pedidos, gerencie seus dados e veja seus cupons.</p>
        </div>
        
        <div className="space-y-8">
            <Banner />
            
            <UserDataSection />

            <CouponSection />

            <div>
                 <Card>
                    <CardHeader>
                         <CardTitle className="font-headline text-xl">Histórico de Pedidos</CardTitle>
                         <CardDescription>Veja o status e os detalhes de todos os seus pedidos.</CardDescription>
                    </CardHeader>
                    <CardContent>
                          {orders.length === 0 ? (
                            <div className="flex flex-col items-center justify-center rounded-lg border-2 border-dashed h-64 bg-card">
                                <p className="text-muted-foreground">Você ainda não fez nenhum pedido.</p>
                                <Button asChild variant="link" className="mt-2">
                                    <Link href="/">Começar a comprar</Link>
                                </Button>
                            </div>
                        ) : (
                            <Accordion type="single" collapsible className="w-full space-y-4">
                            {orders.map(order => (
                                <AccordionItem value={order.id} key={order.id} className="bg-card shadow-sm rounded-lg">
                                    <AccordionTrigger className="p-4 hover:no-underline rounded-lg">
                                        <div className="flex flex-wrap items-center justify-between w-full gap-4">
                                            <div className="text-left">
                                                <h3 className="font-semibold">Pedido #{order.id.slice(0, 5).toUpperCase()}</h3>
                                                <p className="text-sm text-muted-foreground">
                                                    {format(order.createdAt.toDate(), "dd/MM/yyyy 'às' HH:mm", { locale: ptBR })}
                                                </p>
                                            </div>
                                            <div className="text-left">
                                                <p className="text-lg font-bold text-primary">{formatCurrency(order.total)}</p>
                                            </div>
                                            <Badge variant={getStatusVariant(order.status) as any}>{order.status}</Badge>
                                        </div>
                                    </AccordionTrigger>
                                    <AccordionContent>
                                    <div className="px-4 pb-4">
                                        <Separator className="mb-4" />
                                        <div className="space-y-6">
                                            <div>
                                                <h4 className="font-semibold mb-4 text-center">Rastreamento</h4>
                                                <OrderStatusTracker currentStatus={order.status} />
                                            </div>
                                            <Separator />
                                            <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                                                <div>
                                                    <h4 className="font-semibold mb-2">Itens</h4>
                                                    <ul className="list-disc list-inside text-sm text-muted-foreground space-y-1">
                                                        {order.items.map(item => (
                                                            <li key={item.id}>
                                                                {item.quantity}x {item.name}
                                                            </li>
                                                        ))}
                                                    </ul>
                                                </div>
                                                <div>
                                                    <h4 className="font-semibold mb-2">Endereço de Entrega</h4>
                                                    <p className="text-sm text-muted-foreground">{order.address}</p>
                                                </div>
                                            </div>
                                            <Separator />
                                            <div className="flex justify-end gap-2">
                                                 {order.status === 'Pendente' && (
                                                    <AlertDialog>
                                                        <AlertDialogTrigger asChild>
                                                            <Button variant="destructive">
                                                                <XCircle className="mr-2 h-4 w-4" />
                                                                Cancelar Pedido
                                                            </Button>
                                                        </AlertDialogTrigger>
                                                        <AlertDialogContent>
                                                            <AlertDialogHeader>
                                                                <AlertDialogTitle>Cancelar o pedido?</AlertDialogTitle>
                                                                <AlertDialogDescription>
                                                                    Esta ação não pode ser desfeita. Você tem certeza que deseja cancelar este pedido?
                                                                </AlertDialogDescription>
                                                            </AlertDialogHeader>
                                                            <AlertDialogFooter>
                                                                <AlertDialogCancel>Voltar</AlertDialogCancel>
                                                                <AlertDialogAction onClick={() => handleCancelOrder(order.id)} className="bg-destructive hover:bg-destructive/90">Confirmar Cancelamento</AlertDialogAction>
                                                            </AlertDialogFooter>
                                                        </AlertDialogContent>
                                                    </AlertDialog>
                                                 )}
                                                 {order.status === 'Concluído' && <ReviewDialog order={order} />}
                                                 <Button onClick={() => handleRepeatOrder(order)} variant="secondary">
                                                    <Repeat className="mr-2 h-4 w-4" />
                                                    Repetir Pedido
                                                 </Button>
                                            </div>
                                        </div>
                                    </div>
                                    </AccordionContent>
                                </AccordionItem>
                            ))}
                            </Accordion>
                        )}
                    </CardContent>
                 </Card>
            </div>
        </div>
      </main>
    </div>
  );
}
