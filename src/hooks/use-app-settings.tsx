// This is an autogenerated file from Firebase Studio.
"use client";

import { createContext, useContext, useState, ReactNode, useEffect } from "react";
import { listenToSettings, type AppSettings } from "../services/settings-service";

interface AppSettingsContextType {
  settings: AppSettings | null;
  isLoading: boolean;
}

const AppSettingsContext = createContext<AppSettingsContextType>({
  settings: null,
  isLoading: true,
});

function AppSettingsHydrator() {
    const { settings } = useAppSettings();

    useEffect(() => {
        const root = document.documentElement;
        if(settings?.theme) {
            root.style.setProperty('--background', settings.theme.background);
            root.style.setProperty('--primary', settings.theme.primary);
            root.style.setProperty('--accent', settings.theme.accent);
        }
        if(settings?.fonts) {
            root.style.setProperty('--font-body', settings.fonts.fontBody);
            root.style.setProperty('--font-headline', settings.fonts.fontHeadline);
        }
    }, [settings]);

    return null;
}

export const AppSettingsProvider = ({ children }: { children: ReactNode }) => {
  const [settings, setSettings] = useState<AppSettings | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const unsubscribe = listenToSettings((newSettings) => {
      setSettings(newSettings as AppSettings);
      setIsLoading(false);
    });

    // Cleanup subscription on unmount
    return () => unsubscribe();
  }, []);

  return (
    <AppSettingsContext.Provider
      value={{
        settings,
        isLoading,
      }}
    >
      <AppSettingsHydrator />
      {children}
    </AppSettingsContext.Provider>
  );
};

export const useAppSettings = () => {
  const context = useContext(AppSettingsContext);
  if (context === undefined) {
    throw new Error("useAppSettings must be used within an AppSettingsProvider");
  }
  return context;
};
