// This is an autogenerated file from Firebase Studio.
"use client";

import { createContext, useContext, useState, ReactNode, useEffect, useCallback } from "react";
import { User, onAuthStateChanged, Unsubscribe } from "firebase/auth";
import { auth as firebaseAuth, createUserProfileDocument } from "../services/auth-service";
import { doc, onSnapshot } from "firebase/firestore";
import { db } from "../lib/firebase";
import { type UserProfile } from "../types";


interface AuthContextType {
  user: User | null;
  userProfile: UserProfile | null;
  loadingAuth: boolean;
}

const AuthContext = createContext<AuthContextType>({
  user: null,
  userProfile: null,
  loadingAuth: true,
});

export const AuthProvider = ({ children }: { children: ReactNode }) => {
  const [user, setUser] = useState<User | null>(null);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [loadingAuth, setLoadingAuth] = useState(true);

  useEffect(() => {
    const unsubscribe: Unsubscribe = onAuthStateChanged(firebaseAuth, async (currentUser) => {
      setUser(currentUser);
      if (currentUser) {
         // This is the critical part: ensure user profile document exists.
         await createUserProfileDocument(currentUser);
         
         // Now, set up the real-time listener for profile changes.
        const userDocRef = doc(db, "users", currentUser.uid);
        const unsubProfile = onSnapshot(userDocRef, (docSnap) => {
            if (docSnap.exists()) {
                setUserProfile(docSnap.data() as UserProfile);
            } else {
                // This case should be less likely now, but as a fallback:
                setUserProfile(null);
            }
             setLoadingAuth(false);
        });
        return () => unsubProfile(); // Cleanup profile listener on user change
      } else {
        setUserProfile(null);
        setLoadingAuth(false);
      }
    });

    // Cleanup subscription on unmount
    return () => unsubscribe();
  }, []);

  return (
    <AuthContext.Provider
      value={{
        user,
        userProfile,
        loadingAuth,
      }}
    >
      {children}
    </AuthContext.Provider>
  );
};

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (context === undefined) {
    throw new Error("useAuth must be used within an AuthProvider");
  }
  return context;
};
