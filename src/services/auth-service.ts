// This is an autogenerated file from Firebase Studio.
"use client";

import {
  getAuth,
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
  signOut,
  GoogleAuthProvider,
  signInWithPopup,
  User,
} from "firebase/auth";
import { doc, setDoc, getDoc, deleteDoc, serverTimestamp } from "firebase/firestore";
import { db } from "../lib/firebase";
import { auth as firebaseAuth } from "../lib/firebase";
import { UserProfile } from "../types";

// Export auth to be used in other parts of the application, like the auth context.
export const auth = firebaseAuth;

export const createUserProfileDocument = async (user: User, additionalData: Partial<UserProfile> = {}) => {
  if (!user) return;
  const userRef = doc(db, `users/${user.uid}`);
  const docSnap = await getDoc(userRef);

  if (!docSnap.exists()) {
    // Document doesn't exist, create it for the first time.
    const { email, displayName, photoURL } = user;
    try {
      const userData: Partial<UserProfile> = {
        uid: user.uid,
        email,
        displayName: additionalData.displayName || displayName || email?.split('@')[0] || "",
        photoURL: photoURL || additionalData.photoURL || "", // Fallback to empty string instead of undefined
        role: additionalData.role || "customer",
        createdAt: serverTimestamp(),
        addresses: [], // Initialize with empty array
        phone: additionalData.phone || '', // Initialize with empty string
        ...additionalData,
      };
      await setDoc(userRef, userData, { merge: true });
    } catch (error) {
      console.error("Error creating user profile document", error);
    }
  } else {
    // Document exists, we can merge additional data if needed, but for now we do nothing
    // to avoid overriding data unintentionally on every login.
    // Specific profile updates should be handled by dedicated functions.
  }
  
  return userRef;
};


export const signUp = async (email: string, password: string) => {
  try {
    const { user } = await createUserWithEmailAndPassword(
      auth,
      email,
      password
    );
    await createUserProfileDocument(user);
    return { user, error: null };
  } catch (error: any) {
    console.error("Error signing up:", error);
    return { user: null, error };
  }
};

export const createUserFromAdmin = async (userData: Pick<UserProfile, 'displayName' | 'email' | 'role'> & {password: string}) => {
    // This is a simplified example. In a real-world scenario, this should be
    // handled by a server-side function (e.g., Firebase Cloud Function) for security.
    // Creating users on the client-side directly is not recommended for admin panels.
    // This is a temporary solution for demonstration purposes.
    try {
        // This creates the user in Firebase Auth.
        const { user } = await createUserWithEmailAndPassword(auth, userData.email, userData.password);
        
        // This creates the corresponding user profile document in Firestore.
        await createUserProfileDocument(user, {
            displayName: userData.displayName,
            role: userData.role,
        });

        // We need to re-authenticate as the admin user afterwards if this flow kicks them out.
        // For this prototype, we assume this is not an issue.
        
        return { user, error: null };
    } catch (error: any) {
         console.error("Error creating user from admin:", error);
        return { user: null, error };
    }
}

export const deleteUserAccount = async (uid: string) => {
    // This is a critical operation and should ideally be performed in a secure backend environment
    // (like a Firebase Cloud Function) that can properly handle authentication and permissions.
    // The function would also need to delete the user from Firebase Authentication itself,
    // which is not possible from the client-side SDK directly for other users.
    // For this prototype, we'll just delete their Firestore document.
     try {
        const userRef = doc(db, `users/${uid}`);
        await deleteDoc(userRef);
        // Note: This does NOT delete the user from the Firebase Auth system.
        // That requires the Admin SDK on a backend.
        return { success: true, error: null };
    } catch (error: any) {
        console.error("Error deleting user account:", error);
        return { success: false, error };
    }
}


export const signIn = async (email: string, password: string) => {
  try {
    const userCredential = await signInWithEmailAndPassword(
      auth,
      email,
      password
    );
    // Profile creation is now handled by the AuthProvider's onAuthStateChanged
    return { user: userCredential.user, error: null };
  } catch (error: any) {
    console.error("Error signing in:", error);
    return { user: null, error };
  }
};

export const signInWithGoogle = async () => {
    const provider = new GoogleAuthProvider();
    try {
        const { user } = await signInWithPopup(auth, provider);
        // Profile creation is now handled by the AuthProvider's onAuthStateChanged
        return { user, error: null };
    } catch (error: any) {
        console.error("Error signing in with Google:", error);
        return { user: null, error };
    }
};


export const signOutUser = async () => {
  try {
    await signOut(auth);
    return { error: null };
  } catch (error: any) {
    console.error("Error signing out:", error);
    return { error };
  }
};
