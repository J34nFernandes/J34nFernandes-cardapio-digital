// This is an autogenerated file from Firebase Studio.
"use client";

import {
  collection,
  query,
  orderBy,
  onSnapshot,
  Unsubscribe,
  doc,
  updateDoc,
  arrayUnion,
  arrayRemove,
  getDoc,
} from "firebase/firestore";
import { db } from "../lib/firebase";
import { type UserProfile, type Address } from "../types";
import { v4 as uuidv4 } from 'uuid';

const USERS_COLLECTION = "users";

export const listenToUsers = (callback: (users: UserProfile[]) => void): Unsubscribe => {
  const q = query(collection(db, USERS_COLLECTION), orderBy("createdAt", "desc"));
  
  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const users: UserProfile[] = [];
    querySnapshot.forEach((doc) => {
       const data = doc.data();
      // Ensure createdAt exists and convert from Timestamp to Date for consistent usage on client.
      users.push({ 
        ...data, 
        id: doc.id,
        createdAt: data.createdAt?.toDate ? data.createdAt.toDate() : new Date() 
      } as UserProfile);
    });
    callback(users);
  }, (error) => {
    console.error("Error listening to users: ", error);
    callback([]);
  });

  return unsubscribe;
};


export const updateUserRole = async (uid: string, role: UserProfile['role']): Promise<boolean> => {
    try {
        const userRef = doc(db, USERS_COLLECTION, uid);
        await updateDoc(userRef, { role });
        return true;
    } catch (error) {
        console.error("Error updating user role:", error);
        return false;
    }
}

export const updateUserProfile = async (uid: string, data: Partial<Pick<UserProfile, 'displayName' | 'phone'>>): Promise<boolean> => {
    try {
        const userRef = doc(db, USERS_COLLECTION, uid);
        await updateDoc(userRef, data);
        return true;
    } catch (error) {
        console.error("Error updating user profile:", error);
        return false;
    }
};

export const addUserAddress = async (uid: string, address: Omit<Address, 'id'>): Promise<boolean> => {
    try {
        const userRef = doc(db, USERS_COLLECTION, uid);
        const newAddress = { ...address, id: uuidv4() };
        await updateDoc(userRef, {
            addresses: arrayUnion(newAddress)
        });
        return true;
    } catch (error) {
        console.error("Error adding user address:", error);
        return false;
    }
}

export const updateUserAddress = async (uid: string, updatedAddress: Address): Promise<boolean> => {
    try {
        const userRef = doc(db, USERS_COLLECTION, uid);
        const userSnap = await getDoc(userRef);
        if (userSnap.exists()) {
            const userProfile = userSnap.data() as UserProfile;
            const updatedAddresses = userProfile.addresses?.map(addr => 
                addr.id === updatedAddress.id ? updatedAddress : addr
            ) || [];
            await updateDoc(userRef, { addresses: updatedAddresses });
            return true;
        }
        return false;
    } catch (error) {
        console.error("Error updating user address:", error);
        return false;
    }
}

export const deleteUserAddress = async (uid: string, addressToDelete: Address): Promise<boolean> => {
    try {
        const userRef = doc(db, USERS_COLLECTION, uid);
        await updateDoc(userRef, {
            addresses: arrayRemove(addressToDelete)
        });
        return true;
    } catch (error) {
        console.error("Error deleting user address:", error);
        return false;
    }
}
