// This is an autogenerated file from Firebase Studio.
"use client";

import {
  collection,
  addDoc,
  getDocs,
  deleteDoc,
  doc,
  query,
  orderBy,
  onSnapshot,
  Unsubscribe,
  where,
  serverTimestamp,
  limit,
} from "firebase/firestore";
import { db } from "@/lib/firebase";
import { type Coupon } from "@/types";

const COUPONS_COLLECTION = "coupons";

export const listenToCoupons = (callback: (coupons: Coupon[]) => void): Unsubscribe => {
  const q = query(collection(db, COUPONS_COLLECTION), orderBy("createdAt", "desc"));
  const unsubscribe = onSnapshot(q, (querySnapshot) => {
    const coupons: Coupon[] = [];
    querySnapshot.forEach((doc) => {
       const data = doc.data();
      coupons.push({ 
          id: doc.id, 
          ...data,
          createdAt: data.createdAt?.toDate() // Convert Timestamp to Date
        } as Coupon);
    });
    callback(coupons);
  }, (error) => {
    console.error("Error listening to coupons: ", error);
    callback([]);
  });
  return unsubscribe;
};

export const addCoupon = async (
  coupon: Omit<Coupon, "id" | "createdAt">
): Promise<string | null> => {
  try {
    // Check if coupon code already exists
    const q = query(collection(db, COUPONS_COLLECTION), where("code", "==", coupon.code));
    const querySnapshot = await getDocs(q);
    if (!querySnapshot.empty) {
      throw new Error("Coupon code already exists");
    }

    const docRef = await addDoc(collection(db, COUPONS_COLLECTION), {
      ...coupon,
      createdAt: serverTimestamp(),
    });
    return docRef.id;
  } catch (error) {
    console.error("Error adding coupon: ", error);
    throw error; // Re-throw to be handled by the caller
  }
};

export const getCouponByCode = async (code: string): Promise<Coupon | null> => {
    try {
        const q = query(collection(db, COUPONS_COLLECTION), where("code", "==", code), limit(1));
        const querySnapshot = await getDocs(q);
        if (querySnapshot.empty) {
            return null;
        }
        const doc = querySnapshot.docs[0];
        return { id: doc.id, ...doc.data() } as Coupon;
    } catch (error) {
        console.error("Error fetching coupon by code: ", error);
        return null;
    }
}


export const deleteCoupon = async (id: string): Promise<boolean> => {
  try {
    await deleteDoc(doc(db, COUPONS_COLLECTION, id));
    return true;
  } catch (error) {
    console.error("Error deleting coupon: ", error);
    return false;
  }
};
