// This is an autogenerated file from Firebase Studio.
"use client";

import {
  doc,
  getDoc,
  setDoc,
  onSnapshot,
  Unsubscribe,
  updateDoc,
  arrayUnion,
  arrayRemove,
  writeBatch
} from 'firebase/firestore';
import { db } from '../lib/firebase';
import { AppSettings, BannerSettings, CompanyInfo, FontSettings, ThemeColors } from '../types';


const SETTINGS_COLLECTION = 'settings';
const SETTINGS_DOC_ID = 'appSettings'; // Single document for all settings


// Get the settings document reference
const settingsDocRef = doc(db, SETTINGS_COLLECTION, SETTINGS_DOC_ID);

// Ensure the settings document exists with default values
export const ensureSettingsDocExists = async () => {
  const docSnap = await getDoc(settingsDocRef);
  if (!docSnap.exists()) {
    try {
      await setDoc(settingsDocRef, { 
        categories: ["Bebidas", "Cervejas", "Água", "Alimento", "Outro"], 
        units: ["ml", "L", "g", "Kg", "un"],
        banner: {
          headline: "Ofertas Especiais",
          description: "Aproveite nossos combos e promoções por tempo limitado!",
          imageUrl: "https://placehold.co/1200x400.png"
        },
        logoUrl: "",
        theme: {
          background: "0 0% 100%", // white
          primary: "262.1 83.3% 57.8%", // default primary
          accent: "47.9 95.8% 53.1%", // default accent
        },
        fonts: {
            fontBody: 'Inter',
            fontHeadline: 'Space Grotesk',
        },
        companyInfo: {
          name: "Cardápio Digital",
          address: "Sua Rua, 123, Sua Cidade - SP",
          phone: "(99) 99999-9999",
          email: "contato@seudominio.com"
        }
      });
    } catch (error) {
        console.error("Failed to initialize settings document:", error);
    }
  }
};

// Call this once on app startup or in a safe place
ensureSettingsDocExists();

export const listenToSettings = (
  callback: (settings: Partial<AppSettings>) => void
): Unsubscribe => {
  const unsubscribe = onSnapshot(
    settingsDocRef,
    (docSnap) => {
      if (docSnap.exists()) {
        callback(docSnap.data() as AppSettings);
      } else {
        // If it still doesn't exist, provide a default empty state
        callback({ categories: [], units: [] });
      }
    },
    (error) => {
      console.error('Error listening to settings: ', error);
      callback({}); // Return empty object on error
    }
  );
  return unsubscribe;
};

export type SettingType = 'categories' | 'units';

export const addSettingItem = async (type: SettingType, item: string): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { [type]: arrayUnion(item) });
        return true;
    } catch(error) {
        console.error(`Error adding ${type} item:`, error);
        return false;
    }
}

export const deleteSettingItem = async (type: SettingType, item: string): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { [type]: arrayRemove(item) });
        return true;
    } catch(error) {
        console.error(`Error deleting ${type} item:`, error);
        return false;
    }
}

export const updateBannerSettings = async (banner: BannerSettings): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { banner: banner });
        return true;
    } catch (error) {
        console.error(`Error updating banner settings:`, error);
        return false;
    }
}

export const updateLogo = async (logoUrl: string): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { logoUrl: logoUrl });
        return true;
    } catch (error) {
        console.error(`Error updating logo:`, error);
        return false;
    }
}

export const updateThemeColors = async (theme: ThemeColors): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { 'theme.background': theme.background, 'theme.primary': theme.primary, 'theme.accent': theme.accent });
        return true;
    } catch (error) {
        console.error(`Error updating theme colors:`, error);
        return false;
    }
}

export const updateFontSettings = async (fonts: FontSettings): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { fonts: fonts });
        return true;
    } catch (error) {
        console.error(`Error updating font settings:`, error);
        return false;
    }
}

export const updateCompanyInfo = async (companyInfo: CompanyInfo): Promise<boolean> => {
    try {
        await updateDoc(settingsDocRef, { companyInfo: companyInfo });
        return true;
    } catch (error) {
        console.error(`Error updating company info:`, error);
        return false;
    }
}

// Global update function for the whole page
export const updateAllSettings = async (settings: Partial<AppSettings>) => {
  try {
    // Using set with merge:true is like an update but can create the doc if it doesn't exist.
    await setDoc(settingsDocRef, settings, { merge: true });
    return true;
  } catch (error) {
    console.error("Error updating all settings:", error);
    return false;
  }
}
